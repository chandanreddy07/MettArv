{"file_contents":{"design_guidelines.md":{"content":"# Blog Platform Design Guidelines\n\n## Design Approach\n**Selected Approach**: Reference-Based Design inspired by modern publishing platforms like Medium and Notion, prioritizing readability, clean typography, and content-first design.\n\n**Key Design Principles**:\n- Content-first approach with exceptional typography\n- Clean, minimal interface that doesn't compete with written content\n- Professional publishing aesthetic with subtle brand touches\n- Accessibility-focused with excellent contrast and spacing\n\n## Core Design Elements\n\n### A. Color Palette\n**Light Mode**:\n- Primary: 15 15% 15% (deep charcoal for text)\n- Background: 0 0% 100% (pure white)\n- Secondary: 220 13% 91% (light gray for borders/dividers)\n- Accent: 212 100% 47% (medium blue for links/CTAs)\n\n**Dark Mode**:\n- Primary: 0 0% 95% (near white for text)\n- Background: 222 84% 5% (dark slate)\n- Secondary: 215 28% 17% (dark gray for borders)\n- Accent: 212 100% 60% (brighter blue for contrast)\n\n### B. Typography\n**Font Stack**: Inter (primary), system fonts fallback\n- **Headings**: 700 weight, tight letter spacing\n- **Body**: 400 weight, 1.6 line height for optimal reading\n- **Metadata**: 500 weight, smaller sizes for author/date info\n- **Scale**: 14px, 16px, 18px, 24px, 32px, 48px\n\n### C. Layout System\n**Spacing Units**: Tailwind 2, 4, 6, 8, 12, 16 units\n- Consistent 8px grid system\n- Generous whitespace around content blocks\n- Maximum content width: 680px for optimal reading line length\n- Sidebar content: 280px width\n\n### D. Component Library\n\n**Navigation**:\n- Clean header with logo, search, and user avatar\n- Minimal hamburger menu for mobile\n- Sticky navigation with subtle shadow on scroll\n\n**Content Cards**:\n- Clean blog post previews with cover image, title, excerpt\n- Author attribution with small avatar and byline\n- Minimal borders with hover elevation\n\n**Forms**:\n- Clean input fields with subtle borders\n- Focus states with accent color\n- Inline validation with helpful messaging\n\n**Buttons**:\n- Primary: filled with accent color\n- Secondary: outline style with accent border\n- Ghost: text-only with accent color\n- All with subtle hover/focus states\n\n**Rich Text Editor**:\n- Minimal toolbar with essential formatting options\n- Clean, distraction-free writing interface\n- Live preview capabilities\n\n### E. Animations\n**Minimal Motion**:\n- Subtle hover elevations (2-4px)\n- Smooth transitions (200-300ms ease-out)\n- Page load fade-ins for content\n- No distracting or unnecessary animations\n\n## Content Strategy\n\n**Post Layout**:\n- Hero area with cover image and title overlay\n- Clean article typography with optimal line spacing\n- Author bio card at article end\n- Related posts suggestions\n\n**Profile Pages**:\n- Simple header with avatar, name, bio\n- Grid layout for authored posts\n- Clean, scannable post listings\n\n**Search & Discovery**:\n- Prominent search bar in header\n- Tag-based filtering with clean pill design\n- Paginated results with infinite scroll option\n\n## Images\n- **Hero Images**: Large cover images for blog posts (16:9 aspect ratio)\n- **Profile Avatars**: Circular, consistent sizing (40px, 64px, 96px variants)\n- **Post Thumbnails**: Consistent aspect ratios in feed views\n- **Placeholder Images**: Subtle gray backgrounds with centered icons for missing images\n\nThis design prioritizes readability and content discovery while maintaining a professional, modern publishing aesthetic that scales across devices.","size_bytes":3419},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertPostSchema, updatePostSchema, updateUserSchema, insertTagSchema, type UserWithStats, type User, users } from \"../shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { sendEmail, generateVerificationEmail } from \"./sendgrid.js\";\nimport crypto from 'crypto';\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\n// Helper function to sanitize user data for public consumption\nfunction sanitizeUser<T extends User | UserWithStats>(user: T): T {\n  const { emailVerificationToken, ...safeUser } = user;\n  return safeUser as T;\n}\n\n// Helper function to sanitize post data including nested author\nfunction sanitizePost(post: any): any {\n  if (post.author) {\n    return {\n      ...post,\n      author: sanitizeUser(post.author)\n    };\n  }\n  return post;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup Replit Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      res.json(sanitizeUser(user));\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Test route to verify auth is working\n  app.get('/api/test-auth', isAuthenticated, async (req: any, res) => {\n    res.json({ \n      message: 'Authenticated successfully', \n      userId: req.user?.claims?.sub \n    });\n  });\n\n  // User routes\n  app.get('/api/users/:id', async (req, res) => {\n    try {\n      const user = await storage.getUserWithStats(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      res.json(sanitizeUser(user));\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ message: 'Failed to fetch user' });\n    }\n  });\n\n  app.patch('/api/users/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      if (userId !== req.params.id) {\n        return res.status(403).json({ message: 'Forbidden' });\n      }\n      \n      // Validate request body\n      const validationResult = updateUserSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        const validationError = fromZodError(validationResult.error);\n        return res.status(400).json({ message: 'Invalid input', details: validationError.message });\n      }\n      \n      const updatedUser = await storage.updateUser(userId, validationResult.data);\n      if (!updatedUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      res.json(sanitizeUser(updatedUser));\n    } catch (error) {\n      console.error('Error updating user:', error);\n      res.status(500).json({ message: 'Failed to update user' });\n    }\n  });\n\n  // Posts routes\n  app.get('/api/posts', async (req, res) => {\n    try {\n      const { author, status, tag, search, limit, offset } = req.query;\n      const posts = await storage.getPosts({\n        authorId: author as string,\n        status: status as string,\n        tag: tag as string,\n        search: search as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n      });\n      res.json(posts.map(post => sanitizePost(post)));\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n      res.status(500).json({ message: 'Failed to fetch posts' });\n    }\n  });\n\n  app.get('/api/posts/:id', async (req, res) => {\n    try {\n      const post = await storage.getPost(req.params.id);\n      if (!post) {\n        return res.status(404).json({ message: 'Post not found' });\n      }\n      res.json(sanitizePost(post));\n    } catch (error) {\n      console.error('Error fetching post:', error);\n      res.status(500).json({ message: 'Failed to fetch post' });\n    }\n  });\n\n  app.get('/api/posts/slug/:slug', async (req, res) => {\n    try {\n      const post = await storage.getPostBySlug(req.params.slug);\n      if (!post) {\n        return res.status(404).json({ message: 'Post not found' });\n      }\n      res.json(sanitizePost(post));\n    } catch (error) {\n      console.error('Error fetching post:', error);\n      res.status(500).json({ message: 'Failed to fetch post' });\n    }\n  });\n\n  app.post('/api/posts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Validate request body\n      const validationResult = insertPostSchema.safeParse({\n        ...req.body,\n        authorId: userId,\n      });\n      if (!validationResult.success) {\n        const validationError = fromZodError(validationResult.error);\n        return res.status(400).json({ message: 'Invalid input', details: validationError.message });\n      }\n      \n      const post = await storage.createPost(validationResult.data);\n      res.status(201).json(sanitizePost(post));\n    } catch (error) {\n      console.error('Error creating post:', error);\n      // Handle unique constraint violations\n      if ((error as any)?.message?.includes('unique') || (error as any)?.code === '23505') {\n        return res.status(409).json({ message: 'A post with this slug already exists' });\n      }\n      res.status(500).json({ message: 'Failed to create post' });\n    }\n  });\n\n  app.patch('/api/posts/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const post = await storage.getPost(req.params.id);\n      \n      if (!post) {\n        return res.status(404).json({ message: 'Post not found' });\n      }\n      \n      if (post.author.id !== userId) {\n        return res.status(403).json({ message: 'Forbidden' });\n      }\n      \n      // Validate request body\n      const validationResult = updatePostSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        const validationError = fromZodError(validationResult.error);\n        return res.status(400).json({ message: 'Invalid input', details: validationError.message });\n      }\n      \n      const updatedPost = await storage.updatePost(req.params.id, validationResult.data);\n      res.json(sanitizePost(updatedPost));\n    } catch (error) {\n      console.error('Error updating post:', error);\n      // Handle unique constraint violations\n      if ((error as any)?.message?.includes('unique') || (error as any)?.code === '23505') {\n        return res.status(409).json({ message: 'A post with this slug already exists' });\n      }\n      res.status(500).json({ message: 'Failed to update post' });\n    }\n  });\n\n  app.delete('/api/posts/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const post = await storage.getPost(req.params.id);\n      \n      if (!post) {\n        return res.status(404).json({ message: 'Post not found' });\n      }\n      \n      if (post.author.id !== userId) {\n        return res.status(403).json({ message: 'Forbidden' });\n      }\n      \n      const deleted = await storage.deletePost(req.params.id);\n      if (deleted) {\n        res.status(204).send();\n      } else {\n        res.status(500).json({ message: 'Failed to delete post' });\n      }\n    } catch (error) {\n      console.error('Error deleting post:', error);\n      res.status(500).json({ message: 'Failed to delete post' });\n    }\n  });\n\n  // Tags routes\n  app.get('/api/tags', async (req, res) => {\n    try {\n      const tags = await storage.getTags();\n      res.json(tags);\n    } catch (error) {\n      console.error('Error fetching tags:', error);\n      res.status(500).json({ message: 'Failed to fetch tags' });\n    }\n  });\n\n  app.post('/api/tags', isAuthenticated, async (req: any, res) => {\n    try {\n      // Validate request body\n      const validationResult = insertTagSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        const validationError = fromZodError(validationResult.error);\n        return res.status(400).json({ message: 'Invalid input', details: validationError.message });\n      }\n      \n      const tag = await storage.createTag(validationResult.data);\n      res.status(201).json(tag);\n    } catch (error) {\n      console.error('Error creating tag:', error);\n      // Handle unique constraint violations\n      if ((error as any)?.message?.includes('unique') || (error as any)?.code === '23505') {\n        return res.status(409).json({ message: 'A tag with this name already exists' });\n      }\n      res.status(500).json({ message: 'Failed to create tag' });\n    }\n  });\n\n  // Post likes routes\n  app.post('/api/posts/:id/like', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const success = await storage.likePost(userId, req.params.id);\n      res.json({ liked: success });\n    } catch (error) {\n      console.error('Error liking post:', error);\n      res.status(500).json({ message: 'Failed to like post' });\n    }\n  });\n\n  app.delete('/api/posts/:id/like', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const success = await storage.unlikePost(userId, req.params.id);\n      res.json({ unliked: success });\n    } catch (error) {\n      console.error('Error unliking post:', error);\n      res.status(500).json({ message: 'Failed to unlike post' });\n    }\n  });\n\n  // User follow routes\n  app.post('/api/users/:id/follow', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const success = await storage.followUser(userId, req.params.id);\n      res.json({ followed: success });\n    } catch (error) {\n      console.error('Error following user:', error);\n      res.status(500).json({ message: 'Failed to follow user' });\n    }\n  });\n\n  app.delete('/api/users/:id/follow', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const success = await storage.unfollowUser(userId, req.params.id);\n      res.json({ unfollowed: success });\n    } catch (error) {\n      console.error('Error unfollowing user:', error);\n      res.status(500).json({ message: 'Failed to unfollow user' });\n    }\n  });\n\n  // Search routes\n  app.get('/api/search/users', async (req, res) => {\n    try {\n      const { q, limit } = req.query;\n      if (!q) {\n        return res.status(400).json({ message: 'Search query required' });\n      }\n      \n      const users = await storage.searchUsers(\n        q as string,\n        limit ? parseInt(limit as string) : undefined\n      );\n      res.json(users.map(user => sanitizeUser(user)));\n    } catch (error) {\n      console.error('Error searching users:', error);\n      res.status(500).json({ message: 'Failed to search users' });\n    }\n  });\n\n  // Email verification routes\n  app.post('/api/auth/send-verification', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUserWithStats(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      if (user.emailVerified) {\n        return res.status(400).json({ message: 'Email already verified' });\n      }\n      \n      // Generate verification token and save it directly (bypass restricted schema)\n      const token = crypto.randomUUID();\n      await db.update(users).set({ emailVerificationToken: token }).where(eq(users.id, userId));\n      \n      // Send verification email\n      const baseUrl = req.get('origin') || `${req.protocol}://${req.get('host')}`;\n      const emailParams = generateVerificationEmail(user.email!, token, baseUrl);\n      const success = await sendEmail(emailParams);\n      \n      if (success) {\n        res.json({ message: 'Verification email sent' });\n      } else {\n        res.status(500).json({ message: 'Failed to send verification email' });\n      }\n    } catch (error) {\n      console.error('Error sending verification email:', error);\n      res.status(500).json({ message: 'Failed to send verification email' });\n    }\n  });\n\n  app.post('/api/auth/verify-email', async (req, res) => {\n    try {\n      const { token } = req.body;\n      \n      if (!token) {\n        return res.status(400).json({ message: 'Token required' });\n      }\n      \n      const user = await storage.getUserByVerificationToken(token);\n      \n      if (!user) {\n        return res.status(400).json({ message: 'Invalid or expired token' });\n      }\n      \n      if (user.emailVerified) {\n        return res.status(400).json({ message: 'Email already verified' });\n      }\n      \n      // Verify the email and clear the token directly (bypass restricted schema)\n      await db.update(users).set({ \n        emailVerified: true, \n        emailVerificationToken: null \n      }).where(eq(users.id, user.id));\n      \n      res.json({ message: 'Email verified successfully' });\n    } catch (error) {\n      console.error('Error verifying email:', error);\n      res.status(500).json({ message: 'Failed to verify email' });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}","size_bytes":13416},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq, desc, and, ilike, or, count, sql } from \"drizzle-orm\";\nimport { \n  type User, type InsertUser, type UpdateUser, type UpsertUser,\n  type Post, type InsertPost, type UpdatePost, type PostWithAuthor,\n  type Tag, type InsertTag, type UpdateTag,\n  type UserSession, type InsertUserSession,\n  type PostLike, type InsertPostLike,\n  type UserFollow, type InsertUserFollow,\n  type PostTag, type InsertPostTag,\n  type UserWithStats,\n  users, posts, tags, postTags, postLikes, userFollows, userSessions\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Database connection\nconst connectionString = process.env.DATABASE_URL!;\nconst client = neon(connectionString);\nconst db = drizzle(client);\n\n// Helper function to generate SEO-friendly slugs\nexport function generateSlug(title: string): string {\n  return title\n    .toLowerCase()\n    .trim()\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/[\\s_-]+/g, '-') // Replace spaces and underscores with hyphens\n    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n}\n\n// Helper function to calculate estimated read time\nexport function calculateReadTime(content: string): number {\n  const wordsPerMinute = 200;\n  const wordCount = content.trim().split(/\\s+/).length;\n  return Math.max(1, Math.round(wordCount / wordsPerMinute));\n}\n\nexport interface IStorage {\n  // User operations (Required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: UpdateUser): Promise<User | undefined>;\n  getUserWithStats(id: string): Promise<UserWithStats | undefined>;\n  getUserByVerificationToken(token: string): Promise<User | undefined>;\n  searchUsers(query: string, limit?: number): Promise<User[]>;\n  \n  // Post operations  \n  getPost(id: string): Promise<PostWithAuthor | undefined>;\n  getPostBySlug(slug: string): Promise<PostWithAuthor | undefined>;\n  createPost(post: InsertPost): Promise<Post>;\n  updatePost(id: string, post: UpdatePost): Promise<Post | undefined>;\n  deletePost(id: string): Promise<boolean>;\n  getPosts(options?: {\n    authorId?: string;\n    status?: string;\n    tag?: string;\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<PostWithAuthor[]>;\n  \n  // Tag operations\n  getTag(id: string): Promise<Tag | undefined>;\n  getTagBySlug(slug: string): Promise<Tag | undefined>;\n  createTag(tag: InsertTag): Promise<Tag>;\n  updateTag(id: string, tag: UpdateTag): Promise<Tag | undefined>;\n  getTags(limit?: number): Promise<Tag[]>;\n  getPopularTags(limit?: number): Promise<Tag[]>;\n  \n  // Post-Tag relationships\n  addTagToPost(postId: string, tagId: string): Promise<void>;\n  removeTagFromPost(postId: string, tagId: string): Promise<void>;\n  getPostTags(postId: string): Promise<Tag[]>;\n  \n  // Like operations\n  likePost(userId: string, postId: string): Promise<boolean>;\n  unlikePost(userId: string, postId: string): Promise<boolean>;\n  isPostLiked(userId: string, postId: string): Promise<boolean>;\n  getPostLikes(postId: string): Promise<number>;\n  \n  // Follow operations\n  followUser(followerId: string, followingId: string): Promise<boolean>;\n  unfollowUser(followerId: string, followingId: string): Promise<boolean>;\n  isUserFollowing(followerId: string, followingId: string): Promise<boolean>;\n  getUserFollowers(userId: string): Promise<User[]>;\n  getUserFollowing(userId: string): Promise<User[]>;\n  \n  // Session operations\n  createSession(session: InsertUserSession): Promise<UserSession>;\n  getSessionByToken(token: string): Promise<UserSession | undefined>;\n  deleteSession(token: string): Promise<boolean>;\n  deleteUserSessions(userId: string): Promise<boolean>;\n  \n  // Analytics and stats\n  updatePostStats(postId: string): Promise<void>;\n  updateUserStats(userId: string): Promise<void>;\n  updateTagStats(tagId: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n  \n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n  \n  // Required for Replit Auth\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n  \n  async createUser(user: InsertUser): Promise<User> {\n    const now = new Date();\n    const newUser = {\n      ...user,\n      id: randomUUID(),\n      emailVerified: false,\n      createdAt: now,\n      updatedAt: now,\n    };\n    \n    const result = await db.insert(users).values(newUser).returning();\n    return result[0];\n  }\n  \n  async updateUser(id: string, user: UpdateUser): Promise<User | undefined> {\n    const updatedUser = {\n      ...user,\n      updatedAt: new Date(),\n    };\n    \n    const result = await db\n      .update(users)\n      .set(updatedUser)\n      .where(eq(users.id, id))\n      .returning();\n    \n    return result[0];\n  }\n  \n  async getUserWithStats(id: string): Promise<UserWithStats | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n    \n    // Get user stats\n    const [postsCount, followersCount, followingCount] = await Promise.all([\n      db.select({ count: count() }).from(posts).where(eq(posts.authorId, id)),\n      db.select({ count: count() }).from(userFollows).where(eq(userFollows.followingId, id)),\n      db.select({ count: count() }).from(userFollows).where(eq(userFollows.followerId, id)),\n    ]);\n    \n    return {\n      ...user,\n      stats: {\n        posts: postsCount[0]?.count || 0,\n        followers: followersCount[0]?.count || 0,\n        following: followingCount[0]?.count || 0,\n      }\n    };\n  }\n  \n  async getUserByVerificationToken(token: string): Promise<User | undefined> {\n    const result = await db\n      .select()\n      .from(users)\n      .where(eq(users.emailVerificationToken, token))\n      .limit(1);\n    return result[0];\n  }\n\n  async searchUsers(query: string, limit: number = 10): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(or(\n        ilike(users.firstName, `%${query}%`),\n        ilike(users.lastName, `%${query}%`),\n        ilike(users.email, `%${query}%`)\n      ))\n      .limit(limit);\n  }\n  \n  // Post operations\n  async getPost(id: string): Promise<PostWithAuthor | undefined> {\n    const result = await db\n      .select({\n        post: posts,\n        author: users,\n      })\n      .from(posts)\n      .leftJoin(users, eq(posts.authorId, users.id))\n      .where(eq(posts.id, id))\n      .limit(1);\n    \n    if (!result[0] || !result[0].author) return undefined;\n    \n    const postTags = await this.getPostTags(id);\n    const likesCount = await this.getPostLikes(id);\n    \n    return {\n      ...result[0].post,\n      author: result[0].author,\n      tags: postTags,\n      stats: {\n        likes: likesCount,\n        comments: result[0].post.commentsCount || 0,\n      }\n    };\n  }\n  \n  async getPostBySlug(slug: string): Promise<PostWithAuthor | undefined> {\n    const result = await db\n      .select({\n        post: posts,\n        author: users,\n      })\n      .from(posts)\n      .leftJoin(users, eq(posts.authorId, users.id))\n      .where(eq(posts.slug, slug))\n      .limit(1);\n    \n    if (!result[0] || !result[0].author) return undefined;\n    \n    const postTags = await this.getPostTags(result[0].post.id);\n    const likesCount = await this.getPostLikes(result[0].post.id);\n    \n    return {\n      ...result[0].post,\n      author: result[0].author,\n      tags: postTags,\n      stats: {\n        likes: likesCount,\n        comments: result[0].post.commentsCount || 0,\n      }\n    };\n  }\n  \n  async createPost(post: InsertPost): Promise<Post> {\n    const slug = generateSlug(post.title);\n    const readTime = calculateReadTime(post.content);\n    const now = new Date();\n    \n    const newPost = {\n      ...post,\n      id: randomUUID(),\n      slug,\n      readTime,\n      createdAt: now,\n      updatedAt: now,\n      publishedAt: post.status === 'published' ? now : null,\n    };\n    \n    const result = await db.insert(posts).values(newPost).returning();\n    return result[0];\n  }\n  \n  async updatePost(id: string, post: UpdatePost): Promise<Post | undefined> {\n    const updates: any = {\n      ...post,\n      updatedAt: new Date(),\n    };\n    \n    // Update slug if title changed\n    if (post.title) {\n      updates.slug = generateSlug(post.title);\n    }\n    \n    // Update read time if content changed\n    if (post.content) {\n      updates.readTime = calculateReadTime(post.content);\n    }\n    \n    // Set published date if status changed to published\n    if (post.status === 'published') {\n      updates.publishedAt = new Date();\n    }\n    \n    const result = await db\n      .update(posts)\n      .set(updates)\n      .where(eq(posts.id, id))\n      .returning();\n    \n    return result[0];\n  }\n  \n  async deletePost(id: string): Promise<boolean> {\n    const result = await db.delete(posts).where(eq(posts.id, id));\n    return result.rowCount > 0;\n  }\n  \n  async getPosts(options: {\n    authorId?: string;\n    status?: string;\n    tag?: string;\n    search?: string;\n    limit?: number;\n    offset?: number;\n  } = {}): Promise<PostWithAuthor[]> {\n    const { authorId, status = 'published', tag, search, limit = 10, offset = 0 } = options;\n    \n    // Build where conditions\n    const conditions = [];\n    \n    if (authorId) {\n      conditions.push(eq(posts.authorId, authorId));\n    }\n    \n    if (status) {\n      conditions.push(eq(posts.status, status));\n    }\n    \n    if (search) {\n      conditions.push(or(\n        ilike(posts.title, `%${search}%`),\n        ilike(posts.content, `%${search}%`),\n        ilike(posts.excerpt, `%${search}%`)\n      ));\n    }\n    \n    let result;\n    \n    if (tag) {\n      // Query with tag filtering\n      const tagConditions = [eq(tags.slug, tag), ...conditions];\n      result = await db\n        .select({\n          post: posts,\n          author: users,\n        })\n        .from(posts)\n        .leftJoin(users, eq(posts.authorId, users.id))\n        .leftJoin(postTags, eq(posts.id, postTags.postId))\n        .leftJoin(tags, eq(postTags.tagId, tags.id))\n        .where(and(...tagConditions))\n        .orderBy(desc(posts.publishedAt), desc(posts.createdAt))\n        .limit(limit)\n        .offset(offset);\n    } else {\n      // Query without tag filtering\n      const baseQuery = db\n        .select({\n          post: posts,\n          author: users,\n        })\n        .from(posts)\n        .leftJoin(users, eq(posts.authorId, users.id));\n      \n      if (conditions.length > 0) {\n        result = await baseQuery\n          .where(and(...conditions))\n          .orderBy(desc(posts.publishedAt), desc(posts.createdAt))\n          .limit(limit)\n          .offset(offset);\n      } else {\n        result = await baseQuery\n          .orderBy(desc(posts.publishedAt), desc(posts.createdAt))\n          .limit(limit)\n          .offset(offset);\n      }\n    }\n    \n    // Get tags and stats for each post\n    const postsWithDetails = await Promise.all(\n      result.map(async ({ post, author }) => {\n        if (!author) return null;\n        \n        const [postTags, likesCount] = await Promise.all([\n          this.getPostTags(post.id),\n          this.getPostLikes(post.id)\n        ]);\n        \n        return {\n          ...post,\n          author,\n          tags: postTags,\n          stats: {\n            likes: likesCount,\n            comments: post.commentsCount || 0,\n          }\n        };\n      })\n    );\n    \n    return postsWithDetails.filter(Boolean) as PostWithAuthor[];\n  }\n  \n  // Tag operations\n  async getTag(id: string): Promise<Tag | undefined> {\n    const result = await db.select().from(tags).where(eq(tags.id, id)).limit(1);\n    return result[0];\n  }\n  \n  async getTagBySlug(slug: string): Promise<Tag | undefined> {\n    const result = await db.select().from(tags).where(eq(tags.slug, slug)).limit(1);\n    return result[0];\n  }\n  \n  async createTag(tag: InsertTag): Promise<Tag> {\n    const slug = generateSlug(tag.name);\n    const newTag = {\n      ...tag,\n      id: randomUUID(),\n      slug,\n      createdAt: new Date(),\n    };\n    \n    const result = await db.insert(tags).values(newTag).returning();\n    return result[0];\n  }\n  \n  async updateTag(id: string, tag: UpdateTag): Promise<Tag | undefined> {\n    const updates: any = { ...tag };\n    \n    if (tag.name) {\n      updates.slug = generateSlug(tag.name);\n    }\n    \n    const result = await db\n      .update(tags)\n      .set(updates)\n      .where(eq(tags.id, id))\n      .returning();\n    \n    return result[0];\n  }\n  \n  async getTags(limit: number = 50): Promise<Tag[]> {\n    return await db\n      .select()\n      .from(tags)\n      .orderBy(desc(tags.postsCount), tags.name)\n      .limit(limit);\n  }\n  \n  async getPopularTags(limit: number = 10): Promise<Tag[]> {\n    return await db\n      .select()\n      .from(tags)\n      .where(sql`${tags.postsCount} > 0`)\n      .orderBy(desc(tags.postsCount))\n      .limit(limit);\n  }\n  \n  // Post-Tag relationships\n  async addTagToPost(postId: string, tagId: string): Promise<void> {\n    const newPostTag = {\n      id: randomUUID(),\n      postId,\n      tagId,\n      createdAt: new Date(),\n    };\n    \n    await db.insert(postTags).values(newPostTag);\n    await this.updateTagStats(tagId);\n  }\n  \n  async removeTagFromPost(postId: string, tagId: string): Promise<void> {\n    await db.delete(postTags).where(\n      and(\n        eq(postTags.postId, postId),\n        eq(postTags.tagId, tagId)\n      )\n    );\n    await this.updateTagStats(tagId);\n  }\n  \n  async getPostTags(postId: string): Promise<Tag[]> {\n    const result = await db\n      .select({ tag: tags })\n      .from(postTags)\n      .leftJoin(tags, eq(postTags.tagId, tags.id))\n      .where(eq(postTags.postId, postId));\n    \n    return result.map(r => r.tag).filter(Boolean) as Tag[];\n  }\n  \n  // Like operations\n  async likePost(userId: string, postId: string): Promise<boolean> {\n    try {\n      const newLike = {\n        id: randomUUID(),\n        userId,\n        postId,\n        createdAt: new Date(),\n      };\n      \n      await db.insert(postLikes).values(newLike);\n      await this.updatePostStats(postId);\n      return true;\n    } catch (error) {\n      // Duplicate like, ignore\n      return false;\n    }\n  }\n  \n  async unlikePost(userId: string, postId: string): Promise<boolean> {\n    const result = await db.delete(postLikes).where(\n      and(\n        eq(postLikes.userId, userId),\n        eq(postLikes.postId, postId)\n      )\n    );\n    \n    if (result.rowCount > 0) {\n      await this.updatePostStats(postId);\n      return true;\n    }\n    return false;\n  }\n  \n  async isPostLiked(userId: string, postId: string): Promise<boolean> {\n    const result = await db\n      .select({ id: postLikes.id })\n      .from(postLikes)\n      .where(\n        and(\n          eq(postLikes.userId, userId),\n          eq(postLikes.postId, postId)\n        )\n      )\n      .limit(1);\n    \n    return result.length > 0;\n  }\n  \n  async getPostLikes(postId: string): Promise<number> {\n    const result = await db\n      .select({ count: count() })\n      .from(postLikes)\n      .where(eq(postLikes.postId, postId));\n    \n    return result[0]?.count || 0;\n  }\n  \n  // Follow operations\n  async followUser(followerId: string, followingId: string): Promise<boolean> {\n    if (followerId === followingId) return false;\n    \n    try {\n      const newFollow = {\n        id: randomUUID(),\n        followerId,\n        followingId,\n        createdAt: new Date(),\n      };\n      \n      await db.insert(userFollows).values(newFollow);\n      return true;\n    } catch (error) {\n      // Duplicate follow, ignore\n      return false;\n    }\n  }\n  \n  async unfollowUser(followerId: string, followingId: string): Promise<boolean> {\n    const result = await db.delete(userFollows).where(\n      and(\n        eq(userFollows.followerId, followerId),\n        eq(userFollows.followingId, followingId)\n      )\n    );\n    \n    return result.rowCount > 0;\n  }\n  \n  async isUserFollowing(followerId: string, followingId: string): Promise<boolean> {\n    const result = await db\n      .select({ id: userFollows.id })\n      .from(userFollows)\n      .where(\n        and(\n          eq(userFollows.followerId, followerId),\n          eq(userFollows.followingId, followingId)\n        )\n      )\n      .limit(1);\n    \n    return result.length > 0;\n  }\n  \n  async getUserFollowers(userId: string): Promise<User[]> {\n    const result = await db\n      .select({ user: users })\n      .from(userFollows)\n      .leftJoin(users, eq(userFollows.followerId, users.id))\n      .where(eq(userFollows.followingId, userId));\n    \n    return result.map(r => r.user).filter(Boolean) as User[];\n  }\n  \n  async getUserFollowing(userId: string): Promise<User[]> {\n    const result = await db\n      .select({ user: users })\n      .from(userFollows)\n      .leftJoin(users, eq(userFollows.followingId, users.id))\n      .where(eq(userFollows.followerId, userId));\n    \n    return result.map(r => r.user).filter(Boolean) as User[];\n  }\n  \n  // Session operations\n  async createSession(session: InsertUserSession): Promise<UserSession> {\n    const newSession = {\n      ...session,\n      id: randomUUID(),\n      createdAt: new Date(),\n    };\n    \n    const result = await db.insert(userSessions).values(newSession).returning();\n    return result[0];\n  }\n  \n  async getSessionByToken(token: string): Promise<UserSession | undefined> {\n    const result = await db\n      .select()\n      .from(userSessions)\n      .where(eq(userSessions.token, token))\n      .limit(1);\n    \n    return result[0];\n  }\n  \n  async deleteSession(token: string): Promise<boolean> {\n    const result = await db.delete(userSessions).where(eq(userSessions.token, token));\n    return result.rowCount > 0;\n  }\n  \n  async deleteUserSessions(userId: string): Promise<boolean> {\n    const result = await db.delete(userSessions).where(eq(userSessions.userId, userId));\n    return result.rowCount > 0;\n  }\n  \n  // Analytics and stats  \n  async updatePostStats(postId: string): Promise<void> {\n    const likesCount = await this.getPostLikes(postId);\n    \n    await db\n      .update(posts)\n      .set({ likesCount })\n      .where(eq(posts.id, postId));\n  }\n  \n  async updateUserStats(userId: string): Promise<void> {\n    // User stats are calculated dynamically in getUserWithStats\n    // This could be used for caching if needed\n  }\n  \n  async updateTagStats(tagId: string): Promise<void> {\n    const result = await db\n      .select({ count: count() })\n      .from(postTags)\n      .where(eq(postTags.tagId, tagId));\n    \n    const postsCount = result[0]?.count || 0;\n    \n    await db\n      .update(tags)\n      .set({ postsCount })\n      .where(eq(tags.id, tagId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":19300},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, index, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (Required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table (Compatible with Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  // Additional fields for blog platform\n  bio: text(\"bio\"),\n  location: text(\"location\"),\n  website: text(\"website\"),\n  emailVerified: boolean(\"email_verified\").default(false),\n  emailVerificationToken: text(\"email_verification_token\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  emailIdx: index(\"email_idx\").on(table.email),\n}));\n\n// Posts table\nexport const posts = pgTable(\"posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"),\n  coverImage: text(\"cover_image\"),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, published, archived\n  authorId: varchar(\"author_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  likesCount: integer(\"likes_count\").default(0),\n  commentsCount: integer(\"comments_count\").default(0),\n  readTime: integer(\"read_time\").default(5), // estimated read time in minutes\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  slugIdx: index(\"slug_idx\").on(table.slug),\n  authorIdx: index(\"author_idx\").on(table.authorId),\n  statusIdx: index(\"status_idx\").on(table.status),\n  publishedIdx: index(\"published_idx\").on(table.publishedAt),\n}));\n\n// Tags table\nexport const tags = pgTable(\"tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  postsCount: integer(\"posts_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  nameIdx: index(\"tag_name_idx\").on(table.name),\n  slugIdx: index(\"tag_slug_idx\").on(table.slug),\n}));\n\n// Post-Tag junction table\nexport const postTags = pgTable(\"post_tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").notNull().references(() => posts.id, { onDelete: \"cascade\" }),\n  tagId: varchar(\"tag_id\").notNull().references(() => tags.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  postIdx: index(\"post_tags_post_idx\").on(table.postId),\n  tagIdx: index(\"post_tags_tag_idx\").on(table.tagId),\n}));\n\n// Post likes table\nexport const postLikes = pgTable(\"post_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").notNull().references(() => posts.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  postIdx: index(\"post_likes_post_idx\").on(table.postId),\n  userIdx: index(\"post_likes_user_idx\").on(table.userId),\n}));\n\n// User follows table\nexport const userFollows = pgTable(\"user_follows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  followerId: varchar(\"follower_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  followingId: varchar(\"following_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  followerIdx: index(\"user_follows_follower_idx\").on(table.followerId),\n  followingIdx: index(\"user_follows_following_idx\").on(table.followingId),\n}));\n\n// User sessions table for JWT management\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  userIdx: index(\"user_sessions_user_idx\").on(table.userId),\n  tokenIdx: index(\"user_sessions_token_idx\").on(table.token),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  posts: many(posts),\n  likes: many(postLikes),\n  sessions: many(userSessions),\n  followers: many(userFollows, { relationName: \"following\" }),\n  following: many(userFollows, { relationName: \"follower\" }),\n}));\n\nexport const postsRelations = relations(posts, ({ one, many }) => ({\n  author: one(users, { fields: [posts.authorId], references: [users.id] }),\n  tags: many(postTags),\n  likes: many(postLikes),\n}));\n\nexport const tagsRelations = relations(tags, ({ many }) => ({\n  posts: many(postTags),\n}));\n\nexport const postTagsRelations = relations(postTags, ({ one }) => ({\n  post: one(posts, { fields: [postTags.postId], references: [posts.id] }),\n  tag: one(tags, { fields: [postTags.tagId], references: [tags.id] }),\n}));\n\nexport const postLikesRelations = relations(postLikes, ({ one }) => ({\n  post: one(posts, { fields: [postLikes.postId], references: [posts.id] }),\n  user: one(users, { fields: [postLikes.userId], references: [users.id] }),\n}));\n\nexport const userFollowsRelations = relations(userFollows, ({ one }) => ({\n  follower: one(users, { fields: [userFollows.followerId], references: [users.id], relationName: \"follower\" }),\n  following: one(users, { fields: [userFollows.followingId], references: [users.id], relationName: \"following\" }),\n}));\n\nexport const userSessionsRelations = relations(userSessions, ({ one }) => ({\n  user: one(users, { fields: [userSessions.userId], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  emailVerified: true,\n  emailVerificationToken: true,\n});\n\n// Replit Auth specific schemas\nexport const upsertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n  emailVerified: true,\n  emailVerificationToken: true,\n  bio: true,\n  location: true,\n  website: true,\n});\n\nexport const insertPostSchema = createInsertSchema(posts).omit({\n  id: true,\n  slug: true,\n  likesCount: true,\n  commentsCount: true,\n  createdAt: true,\n  updatedAt: true,\n  publishedAt: true,\n});\n\nexport const insertTagSchema = createInsertSchema(tags).omit({\n  id: true,\n  slug: true,\n  postsCount: true,\n  createdAt: true,\n});\n\nexport const insertPostTagSchema = createInsertSchema(postTags).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPostLikeSchema = createInsertSchema(postLikes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserFollowSchema = createInsertSchema(userFollows).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Update schemas - restricted to only allow safe fields\nexport const updateUserSchema = insertUserSchema.pick({\n  firstName: true,\n  lastName: true,\n  bio: true,\n  location: true,\n  website: true,\n  profileImageUrl: true,\n}).partial();\nexport const updatePostSchema = insertPostSchema.omit({ authorId: true }).partial();\nexport const updateTagSchema = insertTagSchema.partial();\n\n// Auth schemas\nexport const loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const registerSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const googleAuthSchema = z.object({\n  googleId: z.string(),\n  email: z.string().email(),\n  name: z.string(),\n  avatar: z.string().optional(),\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\n\nexport type Post = typeof posts.$inferSelect;\nexport type InsertPost = z.infer<typeof insertPostSchema>;\nexport type UpdatePost = z.infer<typeof updatePostSchema>;\n\nexport type Tag = typeof tags.$inferSelect;\nexport type InsertTag = z.infer<typeof insertTagSchema>;\nexport type UpdateTag = z.infer<typeof updateTagSchema>;\n\nexport type PostTag = typeof postTags.$inferSelect;\nexport type InsertPostTag = z.infer<typeof insertPostTagSchema>;\n\nexport type PostLike = typeof postLikes.$inferSelect;\nexport type InsertPostLike = z.infer<typeof insertPostLikeSchema>;\n\nexport type UserFollow = typeof userFollows.$inferSelect;\nexport type InsertUserFollow = z.infer<typeof insertUserFollowSchema>;\n\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\n\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\nexport type GoogleAuthData = z.infer<typeof googleAuthSchema>;\n\n// Utility types for API responses\nexport type PostWithAuthor = Post & {\n  author: User;\n  tags: Tag[];\n  isLiked?: boolean;\n  stats: {\n    likes: number;\n    comments: number;\n  };\n};\n\nexport type UserWithStats = User & {\n  stats: {\n    posts: number;\n    followers: number;\n    following: number;\n  };\n  isFollowing?: boolean;\n};\n","size_bytes":10131},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport BlogApp from \"@/components/BlogApp\";\nimport NotFound from \"@/pages/not-found\";\n\n// Component examples for development\nimport BlogHeaderExample from \"@/components/examples/BlogHeader\";\nimport PostCardExample from \"@/components/examples/PostCard\";\nimport PostFeedExample from \"@/components/examples/PostFeed\";\nimport AuthFormExample from \"@/components/examples/AuthForm\";\nimport PostEditorExample from \"@/components/examples/PostEditor\";\nimport UserProfileExample from \"@/components/examples/UserProfile\";\nimport PostDetailExample from \"@/components/examples/PostDetail\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Main Blog Application */}\n      <Route path=\"/\" component={BlogApp} />\n      \n      {/* Component Examples for Development */}\n      <Route path=\"/examples/header\" component={BlogHeaderExample} />\n      <Route path=\"/examples/post-card\" component={PostCardExample} />\n      <Route path=\"/examples/post-feed\" component={PostFeedExample} />\n      <Route path=\"/examples/auth\" component={AuthFormExample} />\n      <Route path=\"/examples/editor\" component={PostEditorExample} />\n      <Route path=\"/examples/profile\" component={UserProfileExample} />\n      <Route path=\"/examples/post-detail\" component={PostDetailExample} />\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1828},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 0 0% 9%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 0 0% 9%;\n\n  --card-border: 220 13% 89%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 0 0% 9%;\n\n  --sidebar-border: 220 13% 87%;\n\n  --sidebar-primary: 212 100% 47%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 94%;\n\n  --sidebar-accent-foreground: 0 0% 9%;\n\n  --sidebar-ring: 212 100% 47%;\n\n  --popover: 0 0% 95%;\n\n  --popover-foreground: 0 0% 9%;\n\n  --popover-border: 220 13% 85%;\n\n  --primary: 212 100% 47%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 93%;\n\n  --secondary-foreground: 0 0% 9%;\n\n  --muted: 0 0% 96%;\n\n  --muted-foreground: 0 0% 45%;\n\n  --accent: 0 0% 95%;\n\n  --accent-foreground: 0 0% 9%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 85%;\n  --ring: 212 100% 47%;\n  --chart-1: 212 100% 47%;\n  --chart-2: 221 83% 53%;\n  --chart-3: 142 76% 36%;\n  --chart-4: 280 100% 70%;\n  --chart-5: 24 94% 50%;\n\n  --font-sans: Inter, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"Cascadia Code\", \"Roboto Mono\", monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.05);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px -1px rgba(0, 0, 0, 0.1);\n  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px -1px rgba(0, 0, 0, 0.1);\n  --shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.1), 0px 2px 4px -2px rgba(0, 0, 0, 0.1);\n  --shadow-md: 0px 10px 15px -3px rgba(0, 0, 0, 0.1), 0px 4px 6px -4px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0px 20px 25px -5px rgba(0, 0, 0, 0.1), 0px 8px 10px -6px rgba(0, 0, 0, 0.1);\n  --shadow-xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.25);\n  --shadow-2xl: 0px 50px 100px -20px rgba(0, 0, 0, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 84% 5%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 215 28% 17%;\n\n  --card: 222 84% 7%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 215 28% 19%;\n\n  --sidebar: 222 84% 4%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 215 28% 15%;\n\n  --sidebar-primary: 212 100% 60%;\n\n  --sidebar-primary-foreground: 0 0% 9%;\n\n  --sidebar-accent: 222 84% 9%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 212 100% 60%;\n\n  --popover: 222 84% 8%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 215 28% 20%;\n\n  --primary: 212 100% 60%;\n\n  --primary-foreground: 0 0% 9%;\n\n  --secondary: 215 28% 22%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 222 84% 6%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 222 84% 10%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 215 28% 22%;\n  --ring: 212 100% 60%;\n  --chart-1: 212 100% 60%;\n  --chart-2: 221 83% 63%;\n  --chart-3: 142 76% 46%;\n  --chart-4: 280 100% 80%;\n  --chart-5: 24 94% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.2);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.3), 0px 1px 2px -1px rgba(0, 0, 0, 0.3);\n  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.3), 0px 1px 2px -1px rgba(0, 0, 0, 0.3);\n  --shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.4), 0px 2px 4px -2px rgba(0, 0, 0, 0.4);\n  --shadow-md: 0px 10px 15px -3px rgba(0, 0, 0, 0.4), 0px 4px 6px -4px rgba(0, 0, 0, 0.4);\n  --shadow-lg: 0px 20px 25px -5px rgba(0, 0, 0, 0.4), 0px 8px 10px -6px rgba(0, 0, 0, 0.4);\n  --shadow-xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.5);\n  --shadow-2xl: 0px 50px 100px -20px rgba(0, 0, 0, 0.5);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9997},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AuthForm.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { PenTool, Mail, Lock, User, Chrome, AlertCircle, CheckCircle } from \"lucide-react\";\n\ninterface AuthFormProps {\n  mode?: \"login\" | \"register\";\n  onSubmit?: (data: { email: string; password: string; name?: string }) => void;\n  onGoogleLogin?: () => void;\n  onModeChange?: (mode: \"login\" | \"register\") => void;\n  isLoading?: boolean;\n  error?: string;\n  success?: string;\n}\n\nexport default function AuthForm({\n  mode = \"login\",\n  onSubmit,\n  onGoogleLogin,\n  onModeChange,\n  isLoading = false,\n  error,\n  success\n}: AuthFormProps) {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    name: \"\",\n    confirmPassword: \"\"\n  });\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n\n  const isLogin = mode === \"login\";\n\n  const validateForm = () => {\n    const errors: Record<string, string> = {};\n\n    if (!formData.email) {\n      errors.email = \"Email is required\";\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      errors.email = \"Please enter a valid email address\";\n    }\n\n    if (!formData.password) {\n      errors.password = \"Password is required\";\n    } else if (!isLogin && formData.password.length < 6) {\n      errors.password = \"Password must be at least 6 characters\";\n    }\n\n    if (!isLogin) {\n      if (!formData.name) {\n        errors.name = \"Name is required\";\n      }\n      if (formData.password !== formData.confirmPassword) {\n        errors.confirmPassword = \"Passwords don't match\";\n      }\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    const submitData = {\n      email: formData.email,\n      password: formData.password,\n      ...(mode === \"register\" && { name: formData.name })\n    };\n\n    onSubmit?.(submitData);\n    console.log(`${mode} form submitted:`, submitData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (formErrors[field]) {\n      setFormErrors(prev => ({ ...prev, [field]: \"\" }));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <PenTool className=\"h-8 w-8 text-primary mr-2\" />\n            <span className=\"text-2xl font-bold\">BlogCraft</span>\n          </div>\n          <CardTitle className=\"text-2xl\">\n            {isLogin ? \"Welcome back\" : \"Create your account\"}\n          </CardTitle>\n          <CardDescription>\n            {isLogin \n              ? \"Sign in to your account to continue writing\"\n              : \"Join our community of writers and readers\"\n            }\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {/* Status Messages */}\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          {success && (\n            <Alert className=\"border-green-200 bg-green-50 text-green-800\">\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription>{success}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Google Sign In */}\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={() => {\n              onGoogleLogin?.();\n              console.log('Google login clicked');\n            }}\n            disabled={isLoading}\n            data-testid=\"button-google-login\"\n          >\n            <Chrome className=\"h-4 w-4 mr-2\" />\n            Continue with Google\n          </Button>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <Separator className=\"w-full\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">Or continue with email</span>\n            </div>\n          </div>\n\n          {/* Email/Password Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {!isLogin && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name</Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"name\"\n                    data-testid=\"input-name\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    className=\"pl-10\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    disabled={isLoading}\n                  />\n                </div>\n                {formErrors.name && (\n                  <p className=\"text-sm text-red-500\">{formErrors.name}</p>\n                )}\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"email\"\n                  data-testid=\"input-email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  className=\"pl-10\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  disabled={isLoading}\n                />\n              </div>\n              {formErrors.email && (\n                <p className=\"text-sm text-red-500\">{formErrors.email}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  data-testid=\"input-password\"\n                  type=\"password\"\n                  placeholder={isLogin ? \"Enter your password\" : \"Create a password\"}\n                  className=\"pl-10\"\n                  value={formData.password}\n                  onChange={(e) => handleInputChange('password', e.target.value)}\n                  disabled={isLoading}\n                />\n              </div>\n              {formErrors.password && (\n                <p className=\"text-sm text-red-500\">{formErrors.password}</p>\n              )}\n            </div>\n\n            {!isLogin && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    data-testid=\"input-confirm-password\"\n                    type=\"password\"\n                    placeholder=\"Confirm your password\"\n                    className=\"pl-10\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                    disabled={isLoading}\n                  />\n                </div>\n                {formErrors.confirmPassword && (\n                  <p className=\"text-sm text-red-500\">{formErrors.confirmPassword}</p>\n                )}\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-submit\"\n            >\n              {isLoading \n                ? \"Loading...\" \n                : isLogin \n                  ? \"Sign In\" \n                  : \"Create Account\"\n              }\n            </Button>\n          </form>\n\n          {/* Mode Toggle */}\n          <div className=\"text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => {\n                onModeChange?.(isLogin ? \"register\" : \"login\");\n                console.log(`Switching to ${isLogin ? 'register' : 'login'} mode`);\n              }}\n              disabled={isLoading}\n              data-testid=\"button-mode-toggle\"\n            >\n              {isLogin \n                ? \"Don't have an account? Sign up\" \n                : \"Already have an account? Sign in\"\n              }\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9405},"client/src/components/BlogApp.tsx":{"content":"import { useState } from \"react\";\nimport BlogHeader from \"./BlogHeader\";\nimport PostFeed from \"./PostFeed\";\nimport PostDetail from \"./PostDetail\";\nimport UserProfile from \"./UserProfile\";\nimport PostEditor from \"./PostEditor\";\nimport AuthForm from \"./AuthForm\";\nimport workspaceImageUrl from '@assets/generated_images/Blog_workspace_cover_image_1fda9668.png';\nimport techImageUrl from '@assets/generated_images/Tech_blog_cover_image_553b51f6.png';\nimport devAvatarUrl from '@assets/generated_images/Developer_profile_avatar_5119a3ce.png';\nimport writerAvatarUrl from '@assets/generated_images/Writer_profile_avatar_6ea7b8b9.png';\n\ntype ViewType = \"feed\" | \"post\" | \"profile\" | \"editor\" | \"auth\";\n\ninterface AppState {\n  currentView: ViewType;\n  selectedPostId?: string;\n  selectedUserId?: string;\n  editingPostId?: string;\n  authMode: \"login\" | \"register\";\n  isAuthenticated: boolean;\n  currentUser?: {\n    id: string;\n    name: string;\n    avatar?: string;\n    email: string;\n  };\n}\n\nexport default function BlogApp() {\n  //todo: remove mock functionality\n  const [appState, setAppState] = useState<AppState>({\n    currentView: \"feed\",\n    authMode: \"login\",\n    isAuthenticated: true, // Start as authenticated for demo\n    currentUser: {\n      id: \"user-1\",\n      name: \"Sarah Chen\",\n      avatar: devAvatarUrl,\n      email: \"sarah@example.com\"\n    }\n  });\n\n  // Mock data\n  const mockPosts = [\n    {\n      id: \"1\",\n      title: \"Building Modern React Applications with TypeScript\",\n      excerpt: \"Learn how to create scalable React applications using TypeScript, modern hooks, and best practices for component architecture. This comprehensive guide covers everything from setup to deployment.\",\n      content: \"## Introduction\\n\\nTypeScript has become an essential tool for building robust React applications. In this comprehensive guide, we'll explore the best practices and patterns that will help you create scalable, maintainable applications.\\n\\n### Getting Started\\n\\nFirst, let's set up our development environment with the latest tools and configurations...\\n\\n### Key Benefits\\n\\n- **Type Safety**: Catch errors at compile time\\n- **Better Developer Experience**: Enhanced IDE support\\n- **Maintainability**: Easier refactoring and code understanding\\n\\n### Conclusion\\n\\nTypeScript and React make a powerful combination for modern web development.\",\n      coverImage: techImageUrl,\n      tags: [\"React\", \"TypeScript\", \"Frontend\", \"JavaScript\"],\n      publishedAt: \"2024-01-15\",\n      readTime: 8,\n      author: {\n        id: \"user-1\",\n        name: \"Sarah Chen\",\n        avatar: devAvatarUrl,\n        bio: \"Senior Frontend Developer & Technical Writer\"\n      },\n      stats: {\n        likes: 142,\n        comments: 23\n      },\n      status: \"published\" as const\n    },\n    {\n      id: \"2\",\n      title: \"The Art of Remote Work: Finding Balance in a Digital World\",\n      excerpt: \"Discover strategies for maintaining productivity and work-life balance while working remotely. Tips from seasoned remote workers and digital nomads.\",\n      content: \"## Remote Work Revolution\\n\\nThe pandemic accelerated the remote work revolution, but many are still learning how to thrive in this new environment...\\n\\n### Creating Boundaries\\n\\nOne of the biggest challenges is creating clear boundaries between work and personal life...\",\n      coverImage: workspaceImageUrl,\n      tags: [\"Remote Work\", \"Productivity\", \"Lifestyle\", \"Career\"],\n      publishedAt: \"2024-01-12\",\n      readTime: 5,\n      author: {\n        id: \"user-2\",\n        name: \"Marcus Williams\",\n        avatar: writerAvatarUrl,\n        bio: \"Content creator and remote work advocate\"\n      },\n      stats: {\n        likes: 89,\n        comments: 15\n      },\n      status: \"published\" as const\n    },\n    {\n      id: \"3\",\n      title: \"Understanding Web Accessibility: A Developer's Guide\",\n      excerpt: \"A comprehensive guide to implementing accessibility features in web applications, ensuring your content reaches everyone. Learn WCAG guidelines and practical implementation tips.\",\n      content: \"## Why Accessibility Matters\\n\\nWeb accessibility ensures that websites and web applications are usable by people with disabilities...\\n\\n### WCAG Guidelines\\n\\nThe Web Content Accessibility Guidelines provide the foundation...\",\n      tags: [\"Accessibility\", \"Web Development\", \"UX\", \"Frontend\"],\n      publishedAt: \"2024-01-10\",\n      readTime: 12,\n      author: {\n        id: \"user-3\",\n        name: \"Jordan Taylor\",\n        avatar: devAvatarUrl,\n        bio: \"UX Engineer specializing in accessibility\"\n      },\n      stats: {\n        likes: 67,\n        comments: 8\n      },\n      status: \"published\" as const\n    }\n  ];\n\n  const mockUsers = [\n    {\n      id: \"user-1\",\n      name: \"Sarah Chen\",\n      avatar: devAvatarUrl,\n      bio: \"Senior Frontend Developer & Technical Writer. Passionate about React, TypeScript, and developer experience. Building the future of web development one component at a time.\",\n      location: \"San Francisco, CA\",\n      website: \"https://sarahchen.dev\",\n      joinedAt: \"2022-03-15\",\n      isOwnProfile: true,\n      stats: {\n        posts: 24,\n        followers: 1250,\n        following: 180\n      }\n    },\n    {\n      id: \"user-2\",\n      name: \"Marcus Williams\",\n      avatar: writerAvatarUrl,\n      bio: \"Content creator and remote work advocate. Helping teams build better work cultures.\",\n      location: \"Austin, TX\",\n      website: \"https://marcuswrites.com\",\n      joinedAt: \"2021-08-20\",\n      isOwnProfile: false,\n      stats: {\n        posts: 15,\n        followers: 890,\n        following: 150\n      }\n    }\n  ];\n\n  // Navigation handlers\n  const navigateToFeed = () => {\n    setAppState(prev => ({ ...prev, currentView: \"feed\" }));\n  };\n\n  const navigateToPost = (postId: string) => {\n    setAppState(prev => ({ ...prev, currentView: \"post\", selectedPostId: postId }));\n  };\n\n  const navigateToProfile = (userId: string) => {\n    const user = mockUsers.find(u => u.id === userId);\n    if (user) {\n      setAppState(prev => ({ \n        ...prev, \n        currentView: \"profile\", \n        selectedUserId: userId\n      }));\n    }\n  };\n\n  const navigateToEditor = (postId?: string) => {\n    setAppState(prev => ({ \n      ...prev, \n      currentView: \"editor\", \n      editingPostId: postId \n    }));\n  };\n\n  const navigateToAuth = (mode: \"login\" | \"register\" = \"login\") => {\n    setAppState(prev => ({ \n      ...prev, \n      currentView: \"auth\", \n      authMode: mode,\n      isAuthenticated: false\n    }));\n  };\n\n  // Auth handlers\n  const handleLogin = (data: { email: string; password: string; name?: string }) => {\n    console.log('Login attempt:', data);\n    // Simulate successful login\n    setAppState(prev => ({\n      ...prev,\n      isAuthenticated: true,\n      currentView: \"feed\",\n      currentUser: {\n        id: \"user-1\",\n        name: data.name || \"User\",\n        email: data.email,\n        avatar: devAvatarUrl\n      }\n    }));\n  };\n\n  const handleLogout = () => {\n    setAppState(prev => ({\n      ...prev,\n      isAuthenticated: false,\n      currentUser: undefined,\n      currentView: \"auth\"\n    }));\n  };\n\n  const handleGoogleLogin = () => {\n    console.log('Google login initiated');\n    // Simulate Google login\n    setAppState(prev => ({\n      ...prev,\n      isAuthenticated: true,\n      currentView: \"feed\",\n      currentUser: {\n        id: \"user-google\",\n        name: \"Google User\",\n        email: \"user@gmail.com\",\n        avatar: devAvatarUrl\n      }\n    }));\n  };\n\n  // Content handlers\n  const handleSearch = (query: string) => {\n    console.log('Search:', query);\n    // In a real app, this would filter posts or navigate to search results\n  };\n\n  const handleSavePost = (data: any) => {\n    console.log('Saving post:', data);\n    alert('Post saved as draft!');\n  };\n\n  const handlePublishPost = (data: any) => {\n    console.log('Publishing post:', data);\n    alert('Post published successfully!');\n    navigateToFeed();\n  };\n\n  // Get current data based on view\n  const getCurrentPost = () => {\n    if (appState.selectedPostId) {\n      const post = mockPosts.find(p => p.id === appState.selectedPostId);\n      if (post) {\n        return {\n          ...post,\n          isOwnPost: post.author.id === appState.currentUser?.id\n        };\n      }\n    }\n    return null;\n  };\n\n  const getCurrentUser = () => {\n    if (appState.selectedUserId) {\n      const user = mockUsers.find(u => u.id === appState.selectedUserId);\n      if (user) {\n        return {\n          ...user,\n          isOwnProfile: user.id === appState.currentUser?.id\n        };\n      }\n    }\n    return null;\n  };\n\n  const getUserPosts = (userId: string) => {\n    return mockPosts.filter(post => post.author.id === userId);\n  };\n\n  const getRelatedPosts = (currentPostId: string) => {\n    const currentPost = mockPosts.find(p => p.id === currentPostId);\n    if (!currentPost) return [];\n    \n    return mockPosts\n      .filter(post => post.id !== currentPostId)\n      .filter(post => \n        post.tags.some(tag => currentPost.tags.includes(tag)) ||\n        post.author.id === currentPost.author.id\n      )\n      .slice(0, 3)\n      .map(post => ({\n        id: post.id,\n        title: post.title,\n        excerpt: post.excerpt,\n        coverImage: post.coverImage,\n        author: {\n          name: post.author.name,\n          avatar: post.author.avatar\n        },\n        readTime: post.readTime\n      }));\n  };\n\n  // Render content based on current view\n  const renderContent = () => {\n    if (!appState.isAuthenticated) {\n      return (\n        <AuthForm\n          mode={appState.authMode}\n          onSubmit={handleLogin}\n          onGoogleLogin={handleGoogleLogin}\n          onModeChange={(mode) => setAppState(prev => ({ ...prev, authMode: mode }))}\n        />\n      );\n    }\n\n    switch (appState.currentView) {\n      case \"feed\":\n        return (\n          <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold mb-2\">Latest Posts</h1>\n              <p className=\"text-muted-foreground\">Discover amazing content from our community</p>\n            </div>\n            <PostFeed\n              posts={mockPosts}\n              onPostClick={navigateToPost}\n              onAuthorClick={navigateToProfile}\n              onTagClick={(tag) => console.log('Tag clicked:', tag)}\n              onLoadMore={() => console.log('Load more posts')}\n              hasMore={true}\n            />\n          </div>\n        );\n\n      case \"post\":\n        const currentPost = getCurrentPost();\n        if (!currentPost) {\n          navigateToFeed();\n          return null;\n        }\n        return (\n          <PostDetail\n            post={currentPost}\n            relatedPosts={getRelatedPosts(currentPost.id)}\n            onBack={navigateToFeed}\n            onEdit={() => navigateToEditor(currentPost.id)}\n            onAuthorClick={navigateToProfile}\n            onTagClick={(tag) => console.log('Tag clicked:', tag)}\n            onRelatedPostClick={navigateToPost}\n          />\n        );\n\n      case \"profile\":\n        const currentUser = getCurrentUser();\n        if (!currentUser) {\n          navigateToFeed();\n          return null;\n        }\n        return (\n          <UserProfile\n            user={currentUser}\n            posts={getUserPosts(currentUser.id)}\n            onEditProfile={() => console.log('Edit profile')}\n            onFollow={() => console.log('Follow/unfollow')}\n            onPostClick={navigateToPost}\n            onTagClick={(tag) => console.log('Tag clicked:', tag)}\n          />\n        );\n\n      case \"editor\":\n        const editingPost = appState.editingPostId ? \n          mockPosts.find(p => p.id === appState.editingPostId) : null;\n        \n        return (\n          <PostEditor\n            initialData={editingPost ? {\n              title: editingPost.title,\n              content: editingPost.content,\n              excerpt: editingPost.excerpt,\n              tags: editingPost.tags,\n              coverImage: editingPost.coverImage,\n              status: editingPost.status\n            } : undefined}\n            onSave={handleSavePost}\n            onPublish={handlePublishPost}\n            onPreview={(data) => console.log('Preview:', data)}\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {appState.isAuthenticated && (\n        <BlogHeader\n          isAuthenticated={appState.isAuthenticated}\n          user={appState.currentUser}\n          onCreatePost={() => navigateToEditor()}\n          onLogin={() => navigateToAuth(\"login\")}\n          onLogout={handleLogout}\n          onSearch={handleSearch}\n        />\n      )}\n      {renderContent()}\n    </div>\n  );\n}","size_bytes":12768},"client/src/components/BlogHeader.tsx":{"content":"import { Search, PenTool, User, LogIn, Menu, Sun, Moon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useState } from \"react\";\n\ninterface BlogHeaderProps {\n  isAuthenticated?: boolean;\n  user?: {\n    name: string;\n    avatar?: string;\n  };\n  onCreatePost?: () => void;\n  onLogin?: () => void;\n  onLogout?: () => void;\n  onSearch?: (query: string) => void;\n}\n\nexport default function BlogHeader({\n  isAuthenticated = false,\n  user,\n  onCreatePost,\n  onLogin,\n  onLogout,\n  onSearch\n}: BlogHeaderProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch?.(searchQuery);\n    console.log(\"Search triggered:\", searchQuery);\n  };\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    document.documentElement.classList.toggle(\"dark\");\n    console.log(\"Dark mode toggled:\", !darkMode);\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto flex h-16 items-center justify-between px-4 max-w-7xl\">\n        {/* Logo */}\n        <div className=\"flex items-center space-x-2\">\n          <PenTool className=\"h-8 w-8 text-primary\" />\n          <h1 className=\"text-2xl font-bold\">BlogCraft</h1>\n        </div>\n\n        {/* Search Bar - Hidden on mobile */}\n        <form onSubmit={handleSearchSubmit} className=\"hidden md:flex flex-1 max-w-md mx-8\">\n          <div className=\"relative w-full\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              data-testid=\"input-search\"\n              type=\"search\"\n              placeholder=\"Search posts, authors, or tags...\"\n              className=\"pl-10 w-full\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n          </div>\n        </form>\n\n        {/* Actions */}\n        <div className=\"flex items-center space-x-2\">\n          {/* Dark Mode Toggle */}\n          <Button\n            data-testid=\"button-theme-toggle\"\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleDarkMode}\n          >\n            {darkMode ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n          </Button>\n\n          {isAuthenticated ? (\n            <>\n              {/* Create Post Button */}\n              <Button\n                data-testid=\"button-create-post\"\n                onClick={() => {\n                  onCreatePost?.();\n                  console.log(\"Create post clicked\");\n                }}\n                className=\"hidden sm:flex\"\n              >\n                <PenTool className=\"h-4 w-4 mr-2\" />\n                Write\n              </Button>\n\n              {/* User Menu */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    data-testid=\"button-user-menu\"\n                    variant=\"ghost\"\n                    className=\"relative h-8 w-8 rounded-full p-0\"\n                  >\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user?.avatar} alt={user?.name} />\n                      <AvatarFallback>\n                        {user?.name?.charAt(0) || <User className=\"h-4 w-4\" />}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\">\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"font-medium\">{user?.name || \"User\"}</p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    data-testid=\"menu-item-profile\"\n                    onClick={() => console.log(\"Profile clicked\")}\n                  >\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem\n                    data-testid=\"menu-item-posts\"\n                    onClick={() => console.log(\"My posts clicked\")}\n                  >\n                    My Posts\n                  </DropdownMenuItem>\n                  <DropdownMenuItem\n                    data-testid=\"menu-item-drafts\"\n                    onClick={() => console.log(\"Drafts clicked\")}\n                  >\n                    Drafts\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    data-testid=\"menu-item-logout\"\n                    onClick={() => {\n                      onLogout?.();\n                      console.log(\"Logout clicked\");\n                    }}\n                  >\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </>\n          ) : (\n            <Button\n              data-testid=\"button-login\"\n              onClick={() => {\n                onLogin?.();\n                console.log(\"Login clicked\");\n              }}\n            >\n              <LogIn className=\"h-4 w-4 mr-2\" />\n              Login\n            </Button>\n          )}\n\n          {/* Mobile Menu */}\n          <Button\n            data-testid=\"button-mobile-menu\"\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden\"\n            onClick={() => console.log(\"Mobile menu clicked\")}\n          >\n            <Menu className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":6113},"client/src/components/PostCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, MessageCircle, Bookmark, Share2, User } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface PostCardProps {\n  post: {\n    id: string;\n    title: string;\n    excerpt: string;\n    coverImage?: string;\n    tags: string[];\n    publishedAt: string;\n    readTime: number;\n    author: {\n      name: string;\n      avatar?: string;\n    };\n    stats: {\n      likes: number;\n      comments: number;\n    };\n  };\n  onPostClick?: (postId: string) => void;\n  onAuthorClick?: (authorName: string) => void;\n  onTagClick?: (tag: string) => void;\n}\n\nexport default function PostCard({ post, onPostClick, onAuthorClick, onTagClick }: PostCardProps) {\n  const [isLiked, setIsLiked] = useState(false);\n  const [isSaved, setIsSaved] = useState(false);\n  const [likeCount, setLikeCount] = useState(post.stats.likes);\n\n  const handleLike = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsLiked(!isLiked);\n    setLikeCount(prev => isLiked ? prev - 1 : prev + 1);\n    console.log(`Post ${post.id} ${isLiked ? 'unliked' : 'liked'}`);\n  };\n\n  const handleSave = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsSaved(!isSaved);\n    console.log(`Post ${post.id} ${isSaved ? 'unsaved' : 'saved'}`);\n  };\n\n  const handleShare = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    console.log(`Sharing post ${post.id}`);\n  };\n\n  return (\n    <Card \n      className=\"hover-elevate cursor-pointer transition-all duration-200 overflow-hidden group\"\n      onClick={() => {\n        onPostClick?.(post.id);\n        console.log(`Viewing post ${post.id}`);\n      }}\n      data-testid={`card-post-${post.id}`}\n    >\n      {/* Cover Image */}\n      {post.coverImage && (\n        <div className=\"aspect-[16/9] overflow-hidden\">\n          <img\n            src={post.coverImage}\n            alt={post.title}\n            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n            data-testid={`img-cover-${post.id}`}\n          />\n        </div>\n      )}\n      \n      <CardContent className=\"p-6\">\n        {/* Tags */}\n        {post.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-2 mb-3\">\n            {post.tags.slice(0, 3).map((tag) => (\n              <Badge\n                key={tag}\n                variant=\"secondary\"\n                className=\"text-xs hover-elevate cursor-pointer\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onTagClick?.(tag);\n                  console.log(`Tag clicked: ${tag}`);\n                }}\n                data-testid={`badge-tag-${tag}`}\n              >\n                {tag}\n              </Badge>\n            ))}\n            {post.tags.length > 3 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{post.tags.length - 3}\n              </Badge>\n            )}\n          </div>\n        )}\n\n        {/* Title */}\n        <h3 \n          className=\"text-xl font-bold mb-2 line-clamp-2 group-hover:text-primary transition-colors\"\n          data-testid={`text-title-${post.id}`}\n        >\n          {post.title}\n        </h3>\n\n        {/* Excerpt */}\n        <p \n          className=\"text-muted-foreground mb-4 line-clamp-3 leading-relaxed\"\n          data-testid={`text-excerpt-${post.id}`}\n        >\n          {post.excerpt}\n        </p>\n\n        {/* Author and Meta */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div \n            className=\"flex items-center space-x-3 cursor-pointer hover-elevate rounded p-1 -ml-1\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onAuthorClick?.(post.author.name);\n              console.log(`Author clicked: ${post.author.name}`);\n            }}\n            data-testid={`author-info-${post.id}`}\n          >\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={post.author.avatar} alt={post.author.name} />\n              <AvatarFallback>\n                {post.author.name.charAt(0) || <User className=\"h-3 w-3\" />}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <p className=\"text-sm font-medium\">{post.author.name}</p>\n              <div className=\"text-xs text-muted-foreground\">\n                {new Date(post.publishedAt).toLocaleDateString('en-US', {\n                  month: 'short',\n                  day: 'numeric'\n                })} • {post.readTime} min read\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex items-center justify-between pt-2 border-t\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleLike}\n              className={`p-1 h-8 ${isLiked ? 'text-red-500' : 'text-muted-foreground'}`}\n              data-testid={`button-like-${post.id}`}\n            >\n              <Heart className={`h-4 w-4 mr-1 ${isLiked ? 'fill-current' : ''}`} />\n              <span className=\"text-xs\">{likeCount}</span>\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-1 h-8 text-muted-foreground\"\n              onClick={(e) => {\n                e.stopPropagation();\n                console.log(`Comments for post ${post.id}`);\n              }}\n              data-testid={`button-comments-${post.id}`}\n            >\n              <MessageCircle className=\"h-4 w-4 mr-1\" />\n              <span className=\"text-xs\">{post.stats.comments}</span>\n            </Button>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleSave}\n              className={`h-8 w-8 ${isSaved ? 'text-primary' : 'text-muted-foreground'}`}\n              data-testid={`button-save-${post.id}`}\n            >\n              <Bookmark className={`h-4 w-4 ${isSaved ? 'fill-current' : ''}`} />\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleShare}\n              className=\"h-8 w-8 text-muted-foreground\"\n              data-testid={`button-share-${post.id}`}\n            >\n              <Share2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6650},"client/src/components/PostDetail.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Heart,\n  MessageCircle,\n  Bookmark,\n  Share2,\n  ArrowLeft,\n  User,\n  Calendar,\n  Clock,\n  Edit\n} from \"lucide-react\";\n\ninterface PostDetailProps {\n  post: {\n    id: string;\n    title: string;\n    content: string;\n    coverImage?: string;\n    tags: string[];\n    publishedAt: string;\n    readTime: number;\n    author: {\n      id: string;\n      name: string;\n      avatar?: string;\n      bio?: string;\n    };\n    stats: {\n      likes: number;\n      comments: number;\n    };\n    isOwnPost?: boolean;\n  };\n  relatedPosts?: Array<{\n    id: string;\n    title: string;\n    excerpt: string;\n    coverImage?: string;\n    author: {\n      name: string;\n      avatar?: string;\n    };\n    readTime: number;\n  }>;\n  onBack?: () => void;\n  onEdit?: () => void;\n  onAuthorClick?: (authorId: string) => void;\n  onTagClick?: (tag: string) => void;\n  onRelatedPostClick?: (postId: string) => void;\n}\n\nexport default function PostDetail({\n  post,\n  relatedPosts = [],\n  onBack,\n  onEdit,\n  onAuthorClick,\n  onTagClick,\n  onRelatedPostClick\n}: PostDetailProps) {\n  const [isLiked, setIsLiked] = useState(false);\n  const [isSaved, setIsSaved] = useState(false);\n  const [likeCount, setLikeCount] = useState(post.stats.likes);\n\n  const handleLike = () => {\n    setIsLiked(!isLiked);\n    setLikeCount(prev => isLiked ? prev - 1 : prev + 1);\n    console.log(`Post ${post.id} ${isLiked ? 'unliked' : 'liked'}`);\n  };\n\n  const handleSave = () => {\n    setIsSaved(!isSaved);\n    console.log(`Post ${post.id} ${isSaved ? 'unsaved' : 'saved'}`);\n  };\n\n  const handleShare = () => {\n    console.log(`Sharing post ${post.id}`);\n    // In a real app, this would copy the URL or open share dialog\n    alert('Link copied to clipboard!');\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const formatContent = (content: string) => {\n    // Simple markdown-like formatting for demo\n    return content\n      .split('\\n')\n      .map((line, index) => {\n        if (line.startsWith('## ')) {\n          return <h2 key={index} className=\"text-2xl font-bold mt-8 mb-4\">{line.substring(3)}</h2>;\n        }\n        if (line.startsWith('### ')) {\n          return <h3 key={index} className=\"text-xl font-semibold mt-6 mb-3\">{line.substring(4)}</h3>;\n        }\n        if (line.startsWith('- ')) {\n          return (\n            <li key={index} className=\"ml-6 list-disc mb-2\">\n              {line.substring(2).replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')}\n            </li>\n          );\n        }\n        if (line.trim() === '') {\n          return <br key={index} />;\n        }\n        return (\n          <p key={index} className=\"mb-4 leading-relaxed text-lg\">\n            {line.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')}\n          </p>\n        );\n      });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        {/* Back Button */}\n        <Button\n          variant=\"ghost\"\n          onClick={() => {\n            onBack?.();\n            console.log('Back button clicked');\n          }}\n          className=\"mb-6\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to posts\n        </Button>\n\n        {/* Article */}\n        <article className=\"space-y-8\">\n          {/* Header */}\n          <header className=\"space-y-6\">\n            {/* Cover Image */}\n            {post.coverImage && (\n              <div className=\"aspect-[16/9] overflow-hidden rounded-lg\">\n                <img\n                  src={post.coverImage}\n                  alt={post.title}\n                  className=\"w-full h-full object-cover\"\n                  data-testid=\"img-post-cover\"\n                />\n              </div>\n            )}\n\n            {/* Title */}\n            <h1 className=\"text-4xl md:text-5xl font-bold leading-tight\" data-testid=\"text-post-title\">\n              {post.title}\n            </h1>\n\n            {/* Meta and Author Info */}\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n              <div \n                className=\"flex items-center space-x-3 cursor-pointer hover-elevate rounded p-2 -m-2\"\n                onClick={() => {\n                  onAuthorClick?.(post.author.id);\n                  console.log(`Author clicked: ${post.author.name}`);\n                }}\n                data-testid=\"author-info\"\n              >\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarImage src={post.author.avatar} alt={post.author.name} />\n                  <AvatarFallback>\n                    {post.author.name.charAt(0) || <User className=\"h-4 w-4\" />}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <p className=\"font-semibold text-lg\">{post.author.name}</p>\n                  {post.author.bio && (\n                    <p className=\"text-muted-foreground text-sm\">{post.author.bio}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex items-center space-x-2\">\n                {post.isOwnPost && (\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      onEdit?.();\n                      console.log('Edit post clicked');\n                    }}\n                    data-testid=\"button-edit-post\"\n                  >\n                    <Edit className=\"h-4 w-4 mr-2\" />\n                    Edit\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Meta Information */}\n            <div className=\"flex flex-wrap items-center gap-4 text-muted-foreground\">\n              <div className=\"flex items-center gap-1\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>{formatDate(post.publishedAt)}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Clock className=\"h-4 w-4\" />\n                <span>{post.readTime} min read</span>\n              </div>\n            </div>\n\n            {/* Tags */}\n            {post.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2\">\n                {post.tags.map((tag) => (\n                  <Badge\n                    key={tag}\n                    variant=\"secondary\"\n                    className=\"cursor-pointer hover-elevate\"\n                    onClick={() => {\n                      onTagClick?.(tag);\n                      console.log(`Tag clicked: ${tag}`);\n                    }}\n                    data-testid={`badge-tag-${tag}`}\n                  >\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </header>\n\n          <Separator />\n\n          {/* Content */}\n          <div className=\"prose prose-lg max-w-none\" data-testid=\"post-content\">\n            {formatContent(post.content)}\n          </div>\n\n          <Separator />\n\n          {/* Engagement Actions */}\n          <div className=\"flex items-center justify-between py-4\">\n            <div className=\"flex items-center space-x-6\">\n              <Button\n                variant=\"ghost\"\n                onClick={handleLike}\n                className={`${isLiked ? 'text-red-500' : 'text-muted-foreground'} hover:text-red-500`}\n                data-testid=\"button-like\"\n              >\n                <Heart className={`h-5 w-5 mr-2 ${isLiked ? 'fill-current' : ''}`} />\n                <span>{likeCount} likes</span>\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                className=\"text-muted-foreground\"\n                onClick={() => console.log('Comments clicked')}\n                data-testid=\"button-comments\"\n              >\n                <MessageCircle className=\"h-5 w-5 mr-2\" />\n                <span>{post.stats.comments} comments</span>\n              </Button>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleSave}\n                className={`${isSaved ? 'text-primary' : 'text-muted-foreground'}`}\n                data-testid=\"button-save\"\n              >\n                <Bookmark className={`h-5 w-5 ${isSaved ? 'fill-current' : ''}`} />\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleShare}\n                className=\"text-muted-foreground\"\n                data-testid=\"button-share\"\n              >\n                <Share2 className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n        </article>\n\n        {/* Related Posts */}\n        {relatedPosts.length > 0 && (\n          <section className=\"mt-16\">\n            <h2 className=\"text-2xl font-bold mb-6\">Related Posts</h2>\n            <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n              {relatedPosts.map((relatedPost) => (\n                <Card \n                  key={relatedPost.id}\n                  className=\"hover-elevate cursor-pointer\"\n                  onClick={() => {\n                    onRelatedPostClick?.(relatedPost.id);\n                    console.log(`Related post clicked: ${relatedPost.id}`);\n                  }}\n                  data-testid={`card-related-${relatedPost.id}`}\n                >\n                  {relatedPost.coverImage && (\n                    <div className=\"aspect-[16/9] overflow-hidden rounded-t-lg\">\n                      <img\n                        src={relatedPost.coverImage}\n                        alt={relatedPost.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  )}\n                  <CardContent className=\"p-4\">\n                    <h3 className=\"font-semibold mb-2 line-clamp-2\">{relatedPost.title}</h3>\n                    <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\">\n                      {relatedPost.excerpt}\n                    </p>\n                    <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Avatar className=\"h-4 w-4\">\n                          <AvatarImage src={relatedPost.author.avatar} alt={relatedPost.author.name} />\n                          <AvatarFallback className=\"text-xs\">\n                            {relatedPost.author.name.charAt(0)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span>{relatedPost.author.name}</span>\n                      </div>\n                      <span>{relatedPost.readTime} min read</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11478},"client/src/components/PostEditor.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Bold,\n  Italic,\n  Underline,\n  List,\n  ListOrdered,\n  Link,\n  Image,\n  Save,\n  Eye,\n  Send,\n  X,\n  Plus\n} from \"lucide-react\";\n\ninterface PostEditorProps {\n  initialData?: {\n    title: string;\n    content: string;\n    excerpt: string;\n    tags: string[];\n    coverImage?: string;\n    status: \"draft\" | \"published\";\n  };\n  onSave?: (data: any) => void;\n  onPublish?: (data: any) => void;\n  onPreview?: (data: any) => void;\n  isLoading?: boolean;\n}\n\nexport default function PostEditor({\n  initialData,\n  onSave,\n  onPublish,\n  onPreview,\n  isLoading = false\n}: PostEditorProps) {\n  const [formData, setFormData] = useState({\n    title: initialData?.title || \"\",\n    content: initialData?.content || \"\",\n    excerpt: initialData?.excerpt || \"\",\n    tags: initialData?.tags || [],\n    coverImage: initialData?.coverImage || \"\",\n    status: initialData?.status || \"draft\" as \"draft\" | \"published\"\n  });\n  \n  const [newTag, setNewTag] = useState(\"\");\n  const [isPublished, setIsPublished] = useState(formData.status === \"published\");\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const addTag = () => {\n    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        tags: [...prev.tags, newTag.trim()]\n      }));\n      setNewTag(\"\");\n      console.log('Tag added:', newTag.trim());\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\n    }));\n    console.log('Tag removed:', tagToRemove);\n  };\n\n  const handleSave = () => {\n    const dataToSave = {\n      ...formData,\n      status: \"draft\" as const\n    };\n    onSave?.(dataToSave);\n    console.log('Post saved as draft:', dataToSave);\n  };\n\n  const handlePublish = () => {\n    const dataToPublish = {\n      ...formData,\n      status: \"published\" as const\n    };\n    onPublish?.(dataToPublish);\n    console.log('Post published:', dataToPublish);\n  };\n\n  const handlePreview = () => {\n    onPreview?.(formData);\n    console.log('Preview requested:', formData);\n  };\n\n  const toolbarButtons = [\n    { icon: Bold, label: \"Bold\", action: () => console.log('Bold formatting') },\n    { icon: Italic, label: \"Italic\", action: () => console.log('Italic formatting') },\n    { icon: Underline, label: \"Underline\", action: () => console.log('Underline formatting') },\n    { icon: List, label: \"Bullet List\", action: () => console.log('Bullet list') },\n    { icon: ListOrdered, label: \"Numbered List\", action: () => console.log('Numbered list') },\n    { icon: Link, label: \"Insert Link\", action: () => console.log('Insert link') },\n    { icon: Image, label: \"Insert Image\", action: () => console.log('Insert image') },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-2xl font-bold\">\n            {initialData ? 'Edit Post' : 'Create New Post'}\n          </h1>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              onClick={handlePreview}\n              disabled={isLoading}\n              data-testid=\"button-preview\"\n            >\n              <Eye className=\"h-4 w-4 mr-2\" />\n              Preview\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleSave}\n              disabled={isLoading}\n              data-testid=\"button-save-draft\"\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              Save Draft\n            </Button>\n            \n            <Button\n              onClick={handlePublish}\n              disabled={isLoading || !formData.title || !formData.content}\n              data-testid=\"button-publish\"\n            >\n              <Send className=\"h-4 w-4 mr-2\" />\n              Publish\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Editor */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Title */}\n            <div className=\"space-y-2\">\n              <Input\n                data-testid=\"input-title\"\n                placeholder=\"Enter your post title...\"\n                value={formData.title}\n                onChange={(e) => handleInputChange('title', e.target.value)}\n                className=\"text-2xl font-bold border-none px-0 placeholder:text-muted-foreground focus-visible:ring-0\"\n                disabled={isLoading}\n              />\n            </div>\n\n            {/* Cover Image */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"coverImage\">Cover Image URL</Label>\n              <Input\n                id=\"coverImage\"\n                data-testid=\"input-cover-image\"\n                placeholder=\"https://example.com/image.jpg\"\n                value={formData.coverImage}\n                onChange={(e) => handleInputChange('coverImage', e.target.value)}\n                disabled={isLoading}\n              />\n              {formData.coverImage && (\n                <div className=\"aspect-[16/9] overflow-hidden rounded-md border\">\n                  <img\n                    src={formData.coverImage}\n                    alt=\"Cover preview\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Content Editor */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                {/* Toolbar */}\n                <div className=\"flex items-center space-x-1\">\n                  {toolbarButtons.map((button, index) => (\n                    <Button\n                      key={index}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={button.action}\n                      className=\"h-8 w-8 p-0\"\n                      data-testid={`button-${button.label.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <button.icon className=\"h-4 w-4\" />\n                    </Button>\n                  ))}\n                </div>\n                <Separator />\n              </CardHeader>\n              \n              <CardContent>\n                <Textarea\n                  data-testid=\"textarea-content\"\n                  placeholder=\"Start writing your story...\"\n                  value={formData.content}\n                  onChange={(e) => handleInputChange('content', e.target.value)}\n                  className=\"min-h-[400px] border-none resize-none focus-visible:ring-0 text-base leading-relaxed\"\n                  disabled={isLoading}\n                />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Publish Settings */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold\">Publish Settings</h3>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"publish-toggle\">Publish immediately</Label>\n                  <Switch\n                    id=\"publish-toggle\"\n                    checked={isPublished}\n                    onCheckedChange={setIsPublished}\n                    data-testid=\"switch-publish\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label>Status</Label>\n                  <Select value={formData.status} onValueChange={(value) => \n                    handleInputChange('status', value)\n                  }>\n                    <SelectTrigger data-testid=\"select-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"draft\">Draft</SelectItem>\n                      <SelectItem value=\"published\">Published</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tags */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold\">Tags</h3>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    data-testid=\"input-new-tag\"\n                    placeholder=\"Add a tag...\"\n                    value={newTag}\n                    onChange={(e) => setNewTag(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && addTag()}\n                    disabled={isLoading}\n                  />\n                  <Button\n                    size=\"icon\"\n                    onClick={addTag}\n                    disabled={!newTag.trim()}\n                    data-testid=\"button-add-tag\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  {formData.tags.map((tag) => (\n                    <Badge\n                      key={tag}\n                      variant=\"secondary\"\n                      className=\"flex items-center gap-1\"\n                    >\n                      {tag}\n                      <button\n                        onClick={() => removeTag(tag)}\n                        className=\"ml-1 hover:text-destructive\"\n                        data-testid={`button-remove-tag-${tag}`}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Excerpt */}\n            <Card>\n              <CardHeader>\n                <h3 className=\"text-lg font-semibold\">Excerpt</h3>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  data-testid=\"textarea-excerpt\"\n                  placeholder=\"Write a brief description of your post...\"\n                  value={formData.excerpt}\n                  onChange={(e) => handleInputChange('excerpt', e.target.value)}\n                  className=\"min-h-[100px] resize-none\"\n                  disabled={isLoading}\n                />\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  {formData.excerpt.length}/160 characters\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11428},"client/src/components/PostFeed.tsx":{"content":"import { useState } from \"react\";\nimport PostCard from \"./PostCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Filter, TrendingUp, Clock, Heart } from \"lucide-react\";\n\ninterface Post {\n  id: string;\n  title: string;\n  excerpt: string;\n  coverImage?: string;\n  tags: string[];\n  publishedAt: string;\n  readTime: number;\n  author: {\n    name: string;\n    avatar?: string;\n  };\n  stats: {\n    likes: number;\n    comments: number;\n  };\n}\n\ninterface PostFeedProps {\n  posts: Post[];\n  onPostClick?: (postId: string) => void;\n  onAuthorClick?: (authorName: string) => void;\n  onTagClick?: (tag: string) => void;\n  onLoadMore?: () => void;\n  hasMore?: boolean;\n  isLoading?: boolean;\n}\n\nexport default function PostFeed({\n  posts = [],\n  onPostClick,\n  onAuthorClick,\n  onTagClick,\n  onLoadMore,\n  hasMore = false,\n  isLoading = false\n}: PostFeedProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [sortBy, setSortBy] = useState<\"latest\" | \"trending\" | \"popular\">(\"latest\");\n\n  // Get all unique tags from posts\n  const allTags = Array.from(new Set(posts.flatMap(post => post.tags)));\n\n  // Filter posts based on search and tags\n  const filteredPosts = posts.filter(post => {\n    const matchesSearch = searchQuery === \"\" || \n      post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      post.excerpt.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      post.author.name.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesTags = selectedTags.length === 0 ||\n      selectedTags.some(tag => post.tags.includes(tag));\n    \n    return matchesSearch && matchesTags;\n  });\n\n  // Sort posts\n  const sortedPosts = [...filteredPosts].sort((a, b) => {\n    switch (sortBy) {\n      case \"trending\":\n        return (b.stats.likes + b.stats.comments) - (a.stats.likes + a.stats.comments);\n      case \"popular\":\n        return b.stats.likes - a.stats.likes;\n      default: // latest\n        return new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime();\n    }\n  });\n\n  const toggleTag = (tag: string) => {\n    setSelectedTags(prev => \n      prev.includes(tag) \n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n    console.log('Tag filter toggled:', tag);\n  };\n\n  const clearFilters = () => {\n    setSearchQuery(\"\");\n    setSelectedTags([]);\n    console.log('Filters cleared');\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Search and Filters */}\n      <div className=\"space-y-4\">\n        {/* Search Bar */}\n        <div className=\"relative max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            data-testid=\"input-feed-search\"\n            type=\"search\"\n            placeholder=\"Search posts...\"\n            className=\"pl-10\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n        </div>\n\n        {/* Sort Tabs */}\n        <Tabs value={sortBy} onValueChange={(value) => setSortBy(value as any)}>\n          <TabsList className=\"grid w-full max-w-md grid-cols-3\">\n            <TabsTrigger value=\"latest\" data-testid=\"tab-latest\">\n              <Clock className=\"h-4 w-4 mr-2\" />\n              Latest\n            </TabsTrigger>\n            <TabsTrigger value=\"trending\" data-testid=\"tab-trending\">\n              <TrendingUp className=\"h-4 w-4 mr-2\" />\n              Trending\n            </TabsTrigger>\n            <TabsTrigger value=\"popular\" data-testid=\"tab-popular\">\n              <Heart className=\"h-4 w-4 mr-2\" />\n              Popular\n            </TabsTrigger>\n          </TabsList>\n        </Tabs>\n\n        {/* Tag Filters */}\n        {allTags.length > 0 && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <Filter className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm font-medium\">Filter by tags:</span>\n              {selectedTags.length > 0 && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={clearFilters}\n                  className=\"text-xs h-6\"\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear all\n                </Button>\n              )}\n            </div>\n            <div className=\"flex flex-wrap gap-2\">\n              {allTags.slice(0, 12).map((tag) => (\n                <Badge\n                  key={tag}\n                  variant={selectedTags.includes(tag) ? \"default\" : \"secondary\"}\n                  className=\"cursor-pointer hover-elevate\"\n                  onClick={() => toggleTag(tag)}\n                  data-testid={`badge-filter-${tag}`}\n                >\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Active Filters Summary */}\n        {(searchQuery || selectedTags.length > 0) && (\n          <div className=\"text-sm text-muted-foreground\">\n            Showing {sortedPosts.length} of {posts.length} posts\n            {searchQuery && ` matching \"${searchQuery}\"`}\n            {selectedTags.length > 0 && ` with tags: ${selectedTags.join(\", \")}`}\n          </div>\n        )}\n      </div>\n\n      {/* Posts Grid */}\n      {sortedPosts.length > 0 ? (\n        <div className=\"grid gap-6 md:grid-cols-2 xl:grid-cols-3\">\n          {sortedPosts.map((post) => (\n            <PostCard\n              key={post.id}\n              post={post}\n              onPostClick={onPostClick}\n              onAuthorClick={onAuthorClick}\n              onTagClick={(tag) => {\n                toggleTag(tag);\n                onTagClick?.(tag);\n              }}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground text-lg\">No posts found</p>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Try adjusting your search terms or filters\n          </p>\n        </div>\n      )}\n\n      {/* Load More */}\n      {hasMore && sortedPosts.length > 0 && (\n        <div className=\"flex justify-center pt-8\">\n          <Button\n            onClick={() => {\n              onLoadMore?.();\n              console.log('Load more clicked');\n            }}\n            disabled={isLoading}\n            data-testid=\"button-load-more\"\n          >\n            {isLoading ? \"Loading...\" : \"Load More Posts\"}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6755},"client/src/components/UserProfile.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Edit,\n  MapPin,\n  Calendar,\n  Link as LinkIcon,\n  User,\n  Heart,\n  MessageCircle,\n  Settings\n} from \"lucide-react\";\nimport PostCard from \"./PostCard\";\n\ninterface UserProfileProps {\n  user: {\n    id: string;\n    name: string;\n    avatar?: string;\n    bio?: string;\n    location?: string;\n    website?: string;\n    joinedAt: string;\n    isOwnProfile?: boolean;\n    stats: {\n      posts: number;\n      followers: number;\n      following: number;\n    };\n  };\n  posts: Array<{\n    id: string;\n    title: string;\n    excerpt: string;\n    coverImage?: string;\n    tags: string[];\n    publishedAt: string;\n    readTime: number;\n    author: {\n      name: string;\n      avatar?: string;\n    };\n    stats: {\n      likes: number;\n      comments: number;\n    };\n    status?: \"draft\" | \"published\";\n  }>;\n  onEditProfile?: () => void;\n  onFollow?: () => void;\n  onPostClick?: (postId: string) => void;\n  onTagClick?: (tag: string) => void;\n  isFollowing?: boolean;\n}\n\nexport default function UserProfile({\n  user,\n  posts = [],\n  onEditProfile,\n  onFollow,\n  onPostClick,\n  onTagClick,\n  isFollowing = false\n}: UserProfileProps) {\n  const [activeTab, setActiveTab] = useState(\"published\");\n  const [following, setFollowing] = useState(isFollowing);\n\n  const publishedPosts = posts.filter(post => post.status !== \"draft\");\n  const draftPosts = posts.filter(post => post.status === \"draft\");\n  const currentPosts = activeTab === \"published\" ? publishedPosts : draftPosts;\n\n  const handleFollow = () => {\n    setFollowing(!following);\n    onFollow?.();\n    console.log(`${following ? 'Unfollowed' : 'Followed'} ${user.name}`);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'long',\n      year: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        {/* Profile Header */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col md:flex-row items-start md:items-center gap-6\">\n              {/* Avatar */}\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage src={user.avatar} alt={user.name} />\n                <AvatarFallback className=\"text-2xl\">\n                  {user.name.charAt(0) || <User className=\"h-8 w-8\" />}\n                </AvatarFallback>\n              </Avatar>\n\n              {/* User Info */}\n              <div className=\"flex-1 space-y-4\">\n                <div>\n                  <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-user-name\">\n                    {user.name}\n                  </h1>\n                  {user.bio && (\n                    <p className=\"text-muted-foreground text-lg\" data-testid=\"text-user-bio\">\n                      {user.bio}\n                    </p>\n                  )}\n                </div>\n\n                {/* Meta Info */}\n                <div className=\"flex flex-wrap items-center gap-4 text-sm text-muted-foreground\">\n                  {user.location && (\n                    <div className=\"flex items-center gap-1\">\n                      <MapPin className=\"h-4 w-4\" />\n                      <span>{user.location}</span>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center gap-1\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>Joined {formatDate(user.joinedAt)}</span>\n                  </div>\n                  \n                  {user.website && (\n                    <div className=\"flex items-center gap-1\">\n                      <LinkIcon className=\"h-4 w-4\" />\n                      <a \n                        href={user.website} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-primary hover:underline\"\n                        data-testid=\"link-user-website\"\n                      >\n                        Website\n                      </a>\n                    </div>\n                  )}\n                </div>\n\n                {/* Stats */}\n                <div className=\"flex items-center gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold\">{user.stats.posts}</div>\n                    <div className=\"text-sm text-muted-foreground\">Posts</div>\n                  </div>\n                  <div className=\"text-center cursor-pointer hover-elevate rounded p-2 -m-2\" onClick={() => console.log('Followers clicked')}>\n                    <div className=\"text-2xl font-bold\">{user.stats.followers}</div>\n                    <div className=\"text-sm text-muted-foreground\">Followers</div>\n                  </div>\n                  <div className=\"text-center cursor-pointer hover-elevate rounded p-2 -m-2\" onClick={() => console.log('Following clicked')}>\n                    <div className=\"text-2xl font-bold\">{user.stats.following}</div>\n                    <div className=\"text-sm text-muted-foreground\">Following</div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {user.isOwnProfile ? (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        onEditProfile?.();\n                        console.log('Edit profile clicked');\n                      }}\n                      data-testid=\"button-edit-profile\"\n                    >\n                      <Edit className=\"h-4 w-4 mr-2\" />\n                      Edit Profile\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => console.log('Settings clicked')}\n                      data-testid=\"button-settings\"\n                    >\n                      <Settings className=\"h-4 w-4\" />\n                    </Button>\n                  </>\n                ) : (\n                  <Button\n                    variant={following ? \"outline\" : \"default\"}\n                    onClick={handleFollow}\n                    data-testid=\"button-follow\"\n                  >\n                    {following ? \"Following\" : \"Follow\"}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Posts Section */}\n        <div className=\"space-y-6\">\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full max-w-md grid-cols-2\">\n              <TabsTrigger value=\"published\" data-testid=\"tab-published\">\n                Published ({publishedPosts.length})\n              </TabsTrigger>\n              {user.isOwnProfile && (\n                <TabsTrigger value=\"drafts\" data-testid=\"tab-drafts\">\n                  Drafts ({draftPosts.length})\n                </TabsTrigger>\n              )}\n            </TabsList>\n\n            <TabsContent value=\"published\" className=\"mt-6\">\n              {publishedPosts.length > 0 ? (\n                <div className=\"grid gap-6 md:grid-cols-2 xl:grid-cols-3\">\n                  {publishedPosts.map((post) => (\n                    <PostCard\n                      key={post.id}\n                      post={post}\n                      onPostClick={onPostClick}\n                      onTagClick={onTagClick}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <p className=\"text-muted-foreground text-lg\">\n                    {user.isOwnProfile ? \"You haven't published any posts yet.\" : \"No published posts yet.\"}\n                  </p>\n                  {user.isOwnProfile && (\n                    <Button className=\"mt-4\" onClick={() => console.log('Create first post')}>\n                      Create Your First Post\n                    </Button>\n                  )}\n                </div>\n              )}\n            </TabsContent>\n\n            {user.isOwnProfile && (\n              <TabsContent value=\"drafts\" className=\"mt-6\">\n                {draftPosts.length > 0 ? (\n                  <div className=\"grid gap-6 md:grid-cols-2 xl:grid-cols-3\">\n                    {draftPosts.map((post) => (\n                      <Card key={post.id} className=\"hover-elevate cursor-pointer relative\">\n                        <Badge variant=\"secondary\" className=\"absolute top-4 right-4 z-10\">\n                          Draft\n                        </Badge>\n                        <PostCard\n                          post={post}\n                          onPostClick={onPostClick}\n                          onTagClick={onTagClick}\n                        />\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <p className=\"text-muted-foreground text-lg\">No drafts found.</p>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      Start writing and save your work as drafts.\n                    </p>\n                  </div>\n                )}\n              </TabsContent>\n            )}\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9781},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AuthForm.tsx":{"content":"import AuthForm from '../AuthForm';\nimport { useState } from 'react';\n\nexport default function AuthFormExample() {\n  const [mode, setMode] = useState<'login' | 'register'>('login');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  const handleSubmit = (data: { email: string; password: string; name?: string }) => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    // Simulate API call\n    setTimeout(() => {\n      setLoading(false);\n      if (mode === 'register') {\n        setSuccess('Account created successfully! Please check your email to verify your account.');\n      } else {\n        setSuccess('Login successful! Redirecting...');\n      }\n      console.log('Form submitted:', data);\n    }, 1500);\n  };\n\n  const handleGoogleLogin = () => {\n    console.log('Google login initiated');\n    setSuccess('Google login initiated...');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <AuthForm\n        mode={mode}\n        onSubmit={handleSubmit}\n        onGoogleLogin={handleGoogleLogin}\n        onModeChange={setMode}\n        isLoading={loading}\n        error={error}\n        success={success}\n      />\n    </div>\n  );\n}","size_bytes":1255},"client/src/components/examples/BlogHeader.tsx":{"content":"import BlogHeader from '../BlogHeader';\nimport devAvatarUrl from '@assets/generated_images/Developer_profile_avatar_5119a3ce.png';\n\nexport default function BlogHeaderExample() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Authenticated state */}\n      <BlogHeader\n        isAuthenticated={true}\n        user={{\n          name: \"Alex Johnson\",\n          avatar: devAvatarUrl\n        }}\n        onCreatePost={() => console.log('Create post')}\n        onLogin={() => console.log('Login')}\n        onLogout={() => console.log('Logout')}\n        onSearch={(query) => console.log('Search:', query)}\n      />\n      \n      {/* Content placeholder */}\n      <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n        <p className=\"text-muted-foreground\">Blog content would appear here...</p>\n      </div>\n      \n      {/* Non-authenticated state for comparison */}\n      <div className=\"mt-8 border-t pt-8\">\n        <BlogHeader\n          isAuthenticated={false}\n          onLogin={() => console.log('Login')}\n          onSearch={(query) => console.log('Search:', query)}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":1134},"client/src/components/examples/PostCard.tsx":{"content":"import PostCard from '../PostCard';\nimport workspaceImageUrl from '@assets/generated_images/Blog_workspace_cover_image_1fda9668.png';\nimport techImageUrl from '@assets/generated_images/Tech_blog_cover_image_553b51f6.png';\nimport devAvatarUrl from '@assets/generated_images/Developer_profile_avatar_5119a3ce.png';\nimport writerAvatarUrl from '@assets/generated_images/Writer_profile_avatar_6ea7b8b9.png';\n\nexport default function PostCardExample() {\n  //todo: remove mock functionality\n  const mockPosts = [\n    {\n      id: \"1\",\n      title: \"Building Modern React Applications with TypeScript\",\n      excerpt: \"Learn how to create scalable React applications using TypeScript, modern hooks, and best practices for component architecture.\",\n      coverImage: techImageUrl,\n      tags: [\"React\", \"TypeScript\", \"Frontend\"],\n      publishedAt: \"2024-01-15\",\n      readTime: 8,\n      author: {\n        name: \"Sarah Chen\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 142,\n        comments: 23\n      }\n    },\n    {\n      id: \"2\",\n      title: \"The Art of Remote Work: Finding Balance in a Digital World\",\n      excerpt: \"Discover strategies for maintaining productivity and work-life balance while working remotely. Tips from seasoned remote workers.\",\n      coverImage: workspaceImageUrl,\n      tags: [\"Remote Work\", \"Productivity\", \"Lifestyle\"],\n      publishedAt: \"2024-01-12\",\n      readTime: 5,\n      author: {\n        name: \"Marcus Williams\",\n        avatar: writerAvatarUrl\n      },\n      stats: {\n        likes: 89,\n        comments: 15\n      }\n    },\n    {\n      id: \"3\",\n      title: \"Understanding Web Accessibility: A Developer's Guide\",\n      excerpt: \"A comprehensive guide to implementing accessibility features in web applications, ensuring your content reaches everyone.\",\n      tags: [\"Accessibility\", \"Web Development\", \"UX\"],\n      publishedAt: \"2024-01-10\",\n      readTime: 12,\n      author: {\n        name: \"Jordan Taylor\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 67,\n        comments: 8\n      }\n    }\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      <h2 className=\"text-2xl font-bold mb-6\">Blog Post Cards</h2>\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {mockPosts.map((post) => (\n          <PostCard\n            key={post.id}\n            post={post}\n            onPostClick={(id) => console.log('Post clicked:', id)}\n            onAuthorClick={(name) => console.log('Author clicked:', name)}\n            onTagClick={(tag) => console.log('Tag clicked:', tag)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":2647},"client/src/components/examples/PostDetail.tsx":{"content":"import PostDetail from '../PostDetail';\nimport techImageUrl from '@assets/generated_images/Tech_blog_cover_image_553b51f6.png';\nimport workspaceImageUrl from '@assets/generated_images/Blog_workspace_cover_image_1fda9668.png';\nimport devAvatarUrl from '@assets/generated_images/Developer_profile_avatar_5119a3ce.png';\nimport writerAvatarUrl from '@assets/generated_images/Writer_profile_avatar_6ea7b8b9.png';\n\nexport default function PostDetailExample() {\n  //todo: remove mock functionality\n  const mockPost = {\n    id: \"1\",\n    title: \"Building Modern React Applications with TypeScript\",\n    content: \"## Introduction\\n\\nTypeScript has become an essential tool for building robust React applications. In this comprehensive guide, we'll explore the best practices and patterns that will help you create scalable, maintainable applications.\\n\\n### Getting Started\\n\\nFirst, let's set up our development environment with the latest tools and configurations. TypeScript integration with React has never been easier, thanks to modern build tools and excellent tooling support.\\n\\n### Key Benefits\\n\\n- **Type Safety**: Catch errors at compile time rather than runtime\\n- **Better Developer Experience**: Enhanced IDE support with autocomplete and refactoring\\n- **Maintainability**: Easier refactoring and code understanding for large teams\\n- **Documentation**: Types serve as living documentation for your components\\n\\n### Best Practices\\n\\nWhen building React applications with TypeScript, follow these proven patterns:\\n\\n**Component Props**: Always define clear interfaces for your component props. This makes your components more predictable and easier to use.\\n\\n**Custom Hooks**: Leverage TypeScript's generic types to create reusable custom hooks that work with different data types while maintaining type safety.\\n\\n**State Management**: Whether you're using Context API, Redux, or other state management solutions, TypeScript helps you maintain consistent state shapes across your application.\\n\\n### Conclusion\\n\\nTypeScript and React make a powerful combination for modern web development. The initial setup time is quickly recovered through reduced debugging time and improved developer confidence.\",\n    coverImage: techImageUrl,\n    tags: [\"React\", \"TypeScript\", \"Frontend\", \"JavaScript\", \"Web Development\"],\n    publishedAt: \"2024-01-15\",\n    readTime: 8,\n    author: {\n      id: \"author-1\",\n      name: \"Sarah Chen\",\n      avatar: devAvatarUrl,\n      bio: \"Senior Frontend Developer & Technical Writer\"\n    },\n    stats: {\n      likes: 142,\n      comments: 23\n    },\n    isOwnPost: true\n  };\n\n  const mockRelatedPosts = [\n    {\n      id: \"2\",\n      title: \"Understanding Web Accessibility: A Developer's Guide\",\n      excerpt: \"A comprehensive guide to implementing accessibility features in web applications, ensuring your content reaches everyone.\",\n      coverImage: undefined,\n      author: {\n        name: \"Jordan Taylor\",\n        avatar: devAvatarUrl\n      },\n      readTime: 12\n    },\n    {\n      id: \"3\",\n      title: \"The Art of Remote Work: Finding Balance\",\n      excerpt: \"Discover strategies for maintaining productivity and work-life balance while working remotely.\",\n      coverImage: workspaceImageUrl,\n      author: {\n        name: \"Marcus Williams\",\n        avatar: writerAvatarUrl\n      },\n      readTime: 5\n    },\n    {\n      id: \"4\",\n      title: \"CSS Grid vs Flexbox: When to Use What\",\n      excerpt: \"A detailed comparison of CSS Grid and Flexbox layout systems for optimal web layouts.\",\n      coverImage: techImageUrl,\n      author: {\n        name: \"Alex Kim\",\n        avatar: devAvatarUrl\n      },\n      readTime: 6\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <PostDetail\n        post={mockPost}\n        relatedPosts={mockRelatedPosts}\n        onBack={() => console.log('Back to posts')}\n        onEdit={() => console.log('Edit post')}\n        onAuthorClick={(id) => console.log('Author clicked:', id)}\n        onTagClick={(tag) => console.log('Tag clicked:', tag)}\n        onRelatedPostClick={(id) => console.log('Related post clicked:', id)}\n      />\n    </div>\n  );\n}","size_bytes":4147},"client/src/components/examples/PostEditor.tsx":{"content":"import PostEditor from '../PostEditor';\nimport techImageUrl from '@assets/generated_images/Tech_blog_cover_image_553b51f6.png';\n\nexport default function PostEditorExample() {\n  //todo: remove mock functionality\n  const mockInitialData = {\n    title: \"Building Modern React Applications with TypeScript\",\n    content: \"## Introduction\\n\\nTypeScript has become an essential tool for building robust React applications. In this comprehensive guide, we'll explore the best practices and patterns that will help you create scalable, maintainable applications.\\n\\n### Getting Started\\n\\nFirst, let's set up our development environment with the latest tools and configurations...\\n\\n### Key Benefits\\n\\n- **Type Safety**: Catch errors at compile time\\n- **Better Developer Experience**: Enhanced IDE support\\n- **Maintainability**: Easier refactoring and code understanding\\n\\n### Conclusion\\n\\nTypeScript and React make a powerful combination for modern web development.\",\n    excerpt: \"Learn how to create scalable React applications using TypeScript, modern hooks, and best practices for component architecture.\",\n    tags: [\"React\", \"TypeScript\", \"Frontend\", \"JavaScript\"],\n    coverImage: techImageUrl,\n    status: \"draft\" as const\n  };\n\n  const handleSave = (data: any) => {\n    console.log('Saving post:', data);\n    alert('Post saved as draft!');\n  };\n\n  const handlePublish = (data: any) => {\n    console.log('Publishing post:', data);\n    alert('Post published successfully!');\n  };\n\n  const handlePreview = (data: any) => {\n    console.log('Previewing post:', data);\n    alert('Opening preview...');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <PostEditor\n        initialData={mockInitialData}\n        onSave={handleSave}\n        onPublish={handlePublish}\n        onPreview={handlePreview}\n      />\n    </div>\n  );\n}","size_bytes":1848},"client/src/components/examples/PostFeed.tsx":{"content":"import PostFeed from '../PostFeed';\nimport workspaceImageUrl from '@assets/generated_images/Blog_workspace_cover_image_1fda9668.png';\nimport techImageUrl from '@assets/generated_images/Tech_blog_cover_image_553b51f6.png';\nimport devAvatarUrl from '@assets/generated_images/Developer_profile_avatar_5119a3ce.png';\nimport writerAvatarUrl from '@assets/generated_images/Writer_profile_avatar_6ea7b8b9.png';\n\nexport default function PostFeedExample() {\n  //todo: remove mock functionality\n  const mockPosts = [\n    {\n      id: \"1\",\n      title: \"Building Modern React Applications with TypeScript\",\n      excerpt: \"Learn how to create scalable React applications using TypeScript, modern hooks, and best practices for component architecture. This comprehensive guide covers everything from setup to deployment.\",\n      coverImage: techImageUrl,\n      tags: [\"React\", \"TypeScript\", \"Frontend\", \"JavaScript\"],\n      publishedAt: \"2024-01-15\",\n      readTime: 8,\n      author: {\n        name: \"Sarah Chen\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 142,\n        comments: 23\n      }\n    },\n    {\n      id: \"2\",\n      title: \"The Art of Remote Work: Finding Balance in a Digital World\",\n      excerpt: \"Discover strategies for maintaining productivity and work-life balance while working remotely. Tips from seasoned remote workers and digital nomads.\",\n      coverImage: workspaceImageUrl,\n      tags: [\"Remote Work\", \"Productivity\", \"Lifestyle\", \"Career\"],\n      publishedAt: \"2024-01-12\",\n      readTime: 5,\n      author: {\n        name: \"Marcus Williams\",\n        avatar: writerAvatarUrl\n      },\n      stats: {\n        likes: 89,\n        comments: 15\n      }\n    },\n    {\n      id: \"3\",\n      title: \"Understanding Web Accessibility: A Developer's Guide\",\n      excerpt: \"A comprehensive guide to implementing accessibility features in web applications, ensuring your content reaches everyone. Learn WCAG guidelines and practical implementation tips.\",\n      tags: [\"Accessibility\", \"Web Development\", \"UX\", \"Frontend\"],\n      publishedAt: \"2024-01-10\",\n      readTime: 12,\n      author: {\n        name: \"Jordan Taylor\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 67,\n        comments: 8\n      }\n    },\n    {\n      id: \"4\",\n      title: \"CSS Grid vs Flexbox: When to Use What\",\n      excerpt: \"A detailed comparison of CSS Grid and Flexbox layout systems. Learn when to use each approach for optimal web layouts.\",\n      coverImage: techImageUrl,\n      tags: [\"CSS\", \"Web Development\", \"Layout\", \"Frontend\"],\n      publishedAt: \"2024-01-08\",\n      readTime: 6,\n      author: {\n        name: \"Alex Kim\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 134,\n        comments: 19\n      }\n    },\n    {\n      id: \"5\",\n      title: \"Building a Personal Brand as a Developer\",\n      excerpt: \"Learn how to build and maintain a strong personal brand in the tech industry. From social media presence to portfolio creation.\",\n      tags: [\"Career\", \"Personal Branding\", \"Tech Industry\"],\n      publishedAt: \"2024-01-05\",\n      readTime: 7,\n      author: {\n        name: \"Taylor Swift\",\n        avatar: writerAvatarUrl\n      },\n      stats: {\n        likes: 203,\n        comments: 45\n      }\n    },\n    {\n      id: \"6\",\n      title: \"The Future of JavaScript: ES2024 Features\",\n      excerpt: \"Explore the latest JavaScript features coming in ES2024. From new syntax to improved performance and developer experience.\",\n      coverImage: techImageUrl,\n      tags: [\"JavaScript\", \"ES2024\", \"Frontend\", \"Programming\"],\n      publishedAt: \"2024-01-03\",\n      readTime: 10,\n      author: {\n        name: \"David Park\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 156,\n        comments: 32\n      }\n    }\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Latest Posts</h1>\n        <p className=\"text-muted-foreground\">Discover amazing content from our community</p>\n      </div>\n      \n      <PostFeed\n        posts={mockPosts}\n        onPostClick={(id) => console.log('Post clicked:', id)}\n        onAuthorClick={(name) => console.log('Author clicked:', name)}\n        onTagClick={(tag) => console.log('Tag clicked:', tag)}\n        onLoadMore={() => console.log('Load more posts')}\n        hasMore={true}\n      />\n    </div>\n  );\n}","size_bytes":4409},"client/src/components/examples/UserProfile.tsx":{"content":"import UserProfile from '../UserProfile';\nimport workspaceImageUrl from '@assets/generated_images/Blog_workspace_cover_image_1fda9668.png';\nimport techImageUrl from '@assets/generated_images/Tech_blog_cover_image_553b51f6.png';\nimport devAvatarUrl from '@assets/generated_images/Developer_profile_avatar_5119a3ce.png';\nimport writerAvatarUrl from '@assets/generated_images/Writer_profile_avatar_6ea7b8b9.png';\n\nexport default function UserProfileExample() {\n  //todo: remove mock functionality\n  const mockUser = {\n    id: \"1\",\n    name: \"Sarah Chen\",\n    avatar: devAvatarUrl,\n    bio: \"Senior Frontend Developer & Technical Writer. Passionate about React, TypeScript, and developer experience. Building the future of web development one component at a time.\",\n    location: \"San Francisco, CA\",\n    website: \"https://sarahchen.dev\",\n    joinedAt: \"2022-03-15\",\n    isOwnProfile: true,\n    stats: {\n      posts: 24,\n      followers: 1250,\n      following: 180\n    }\n  };\n\n  const mockPosts = [\n    {\n      id: \"1\",\n      title: \"Building Modern React Applications with TypeScript\",\n      excerpt: \"Learn how to create scalable React applications using TypeScript, modern hooks, and best practices for component architecture.\",\n      coverImage: techImageUrl,\n      tags: [\"React\", \"TypeScript\", \"Frontend\", \"JavaScript\"],\n      publishedAt: \"2024-01-15\",\n      readTime: 8,\n      author: {\n        name: \"Sarah Chen\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 142,\n        comments: 23\n      },\n      status: \"published\" as const\n    },\n    {\n      id: \"2\",\n      title: \"Understanding Web Accessibility: A Developer's Guide\",\n      excerpt: \"A comprehensive guide to implementing accessibility features in web applications, ensuring your content reaches everyone.\",\n      tags: [\"Accessibility\", \"Web Development\", \"UX\", \"Frontend\"],\n      publishedAt: \"2024-01-10\",\n      readTime: 12,\n      author: {\n        name: \"Sarah Chen\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 67,\n        comments: 8\n      },\n      status: \"published\" as const\n    },\n    {\n      id: \"3\",\n      title: \"The Future of JavaScript: ES2024 Features\",\n      excerpt: \"Explore the latest JavaScript features coming in ES2024. From new syntax to improved performance and developer experience.\",\n      coverImage: techImageUrl,\n      tags: [\"JavaScript\", \"ES2024\", \"Frontend\", \"Programming\"],\n      publishedAt: \"2024-01-03\",\n      readTime: 10,\n      author: {\n        name: \"Sarah Chen\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 156,\n        comments: 32\n      },\n      status: \"published\" as const\n    },\n    {\n      id: \"4\",\n      title: \"Advanced React Patterns (Draft)\",\n      excerpt: \"Deep dive into advanced React patterns including compound components, render props, and custom hooks.\",\n      tags: [\"React\", \"Advanced\", \"Patterns\"],\n      publishedAt: \"2024-01-18\",\n      readTime: 15,\n      author: {\n        name: \"Sarah Chen\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 0,\n        comments: 0\n      },\n      status: \"draft\" as const\n    },\n    {\n      id: \"5\",\n      title: \"Component Testing Strategies (Draft)\",\n      excerpt: \"Best practices for testing React components with Jest and React Testing Library.\",\n      tags: [\"Testing\", \"React\", \"Jest\"],\n      publishedAt: \"2024-01-20\",\n      readTime: 8,\n      author: {\n        name: \"Sarah Chen\",\n        avatar: devAvatarUrl\n      },\n      stats: {\n        likes: 0,\n        comments: 0\n      },\n      status: \"draft\" as const\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <UserProfile\n        user={mockUser}\n        posts={mockPosts}\n        onEditProfile={() => console.log('Edit profile clicked')}\n        onFollow={() => console.log('Follow/unfollow clicked')}\n        onPostClick={(id) => console.log('Post clicked:', id)}\n        onTagClick={(tag) => console.log('Tag clicked:', tag)}\n      />\n      \n      {/* Example of non-own profile */}\n      <div className=\"mt-16 border-t pt-16\">\n        <UserProfile\n          user={{\n            ...mockUser,\n            name: \"Marcus Williams\",\n            avatar: writerAvatarUrl,\n            bio: \"Content creator and remote work advocate. Helping teams build better work cultures.\",\n            isOwnProfile: false,\n            stats: {\n              posts: 15,\n              followers: 890,\n              following: 150\n            }\n          }}\n          posts={mockPosts.filter(post => post.status === 'published').slice(0, 2)}\n          onFollow={() => console.log('Follow clicked')}\n          onPostClick={(id) => console.log('Post clicked:', id)}\n          onTagClick={(tag) => console.log('Tag clicked:', tag)}\n          isFollowing={false}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":4822},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/sendgrid.ts":{"content":"// SendGrid integration - referenced from blueprint:javascript_sendgrid\nimport { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  throw new Error(\"SENDGRID_API_KEY environment variable must be set\");\n}\n\nconst mailService = new MailService();\nmailService.setApiKey(process.env.SENDGRID_API_KEY);\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    await mailService.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text || '',\n      html: params.html || '',\n    });\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\nexport function generateVerificationEmail(email: string, token: string, baseUrl: string) {\n  const verificationUrl = `${baseUrl}/verify-email?token=${token}`;\n  \n  return {\n    to: email,\n    from: 'noreply@yourdomain.com', // Replace with your verified sender\n    subject: 'Verify your email address',\n    text: `Please verify your email address by clicking this link: ${verificationUrl}`,\n    html: `\n      <div style=\"max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;\">\n        <h2 style=\"color: #333; text-align: center;\">Verify your email address</h2>\n        <p>Thank you for signing up! Please click the button below to verify your email address:</p>\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${verificationUrl}\" style=\"background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;\">Verify Email</a>\n        </div>\n        <p style=\"color: #666; font-size: 14px;\">If you didn't create this account, you can safely ignore this email.</p>\n        <p style=\"color: #666; font-size: 14px;\">This link will expire in 24 hours.</p>\n      </div>\n    `\n  };\n}","size_bytes":1992}},"version":1}